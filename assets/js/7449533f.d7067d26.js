"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([["7625"],{6230:function(e,n,t){t.r(n),t.d(n,{frontMatter:()=>a,default:()=>u,toc:()=>l,metadata:()=>i,assets:()=>o,contentTitle:()=>c});var i=JSON.parse('{"id":"api/@atomic-testing/vue-3/index","title":"@atomic-testing/vue-3","description":"Vue 3 test adapter that extends Atomic Testing\'s component driver pattern to Vue applications. It enables testing Vue components using the same high-level semantic APIs used across React, Playwright, and DOM environments.","source":"@site/docs/api/@atomic-testing/vue-3/index.md","sourceDirName":"api/@atomic-testing/vue-3","slug":"/api/@atomic-testing/vue-3/","permalink":"/docs/api/@atomic-testing/vue-3/","draft":false,"unlisted":false,"editUrl":"https://github.com/atomic-testing/atomic-testing/tree/main/docs/docs/docs/api/@atomic-testing/vue-3/index.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Interface: IReactTestEngineOption","permalink":"/docs/api/@atomic-testing/react-legacy/interfaces/IReactTestEngineOption"},"next":{"title":"Class: VueInteractor","permalink":"/docs/api/@atomic-testing/vue-3/classes/VueInteractor"}}'),s=t(54381),r=t(91261);let a={},c="@atomic-testing/vue-3",o={},l=[{value:"Overview",id:"overview",level:2},{value:"Key Features",id:"key-features",level:3},{value:"Installation",id:"installation",level:2},{value:"Architecture",id:"architecture",level:2},{value:"VueInteractor",id:"vueinteractor",level:3},{value:"Test Engine Factory",id:"test-engine-factory",level:3},{value:"Framework Integration",id:"framework-integration",level:3},{value:"Usage",id:"usage",level:2},{value:"Basic Example",id:"basic-example",level:3},{value:"SFC-Like Components",id:"sfc-like-components",level:3},{value:"Testing Rendered Components",id:"testing-rendered-components",level:3},{value:"Cross-Framework Compatibility",id:"cross-framework-compatibility",level:2},{value:"Integration with Vue Ecosystem",id:"integration-with-vue-ecosystem",level:2},{value:"Vue Testing Library",id:"vue-testing-library",level:3},{value:"Vue Reactivity",id:"vue-reactivity",level:3},{value:"TypeScript Support",id:"typescript-support",level:3},{value:"Why Use @atomic-testing/vue-3?",id:"why-use-atomic-testingvue-3",level:2},{value:"Classes",id:"classes",level:2},{value:"Interfaces",id:"interfaces",level:2},{value:"Functions",id:"functions",level:2}];function d(e){let n={a:"a",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"atomic-testingvue-3",children:"@atomic-testing/vue-3"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Vue 3 test adapter"})," that extends Atomic Testing's component driver pattern to Vue applications. It enables testing Vue components using the same high-level semantic APIs used across React, Playwright, and DOM environments."]}),"\n",(0,s.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"@atomic-testing/vue-3"})," package brings Atomic Testing's \"component driver\" abstraction to Vue 3, maintaining architectural consistency while respecting Vue's unique reactivity model. It provides reliable, framework-agnostic testing by automatically handling Vue's async reactivity system."]}),"\n",(0,s.jsx)(n.h3,{id:"key-features",children:"Key Features"}),"\n",(0,s.jsxs)(n.p,{children:["\u2705 ",(0,s.jsx)(n.strong,{children:"Unified API"}),": Vue components use identical component drivers as other frameworks",(0,s.jsx)(n.br,{}),"\n","\u2705 ",(0,s.jsx)(n.strong,{children:"Reactivity Safety"}),": Properly handles Vue's async reactivity system using ",(0,s.jsx)(n.code,{children:"nextTick()"}),(0,s.jsx)(n.br,{}),"\n","\u2705 ",(0,s.jsx)(n.strong,{children:"Cross-Framework"}),": Test patterns learned in React translate directly to Vue",(0,s.jsx)(n.br,{}),"\n","\u2705 ",(0,s.jsx)(n.strong,{children:"E2E Ready"}),": Same drivers work in both DOM and Playwright environments",(0,s.jsx)(n.br,{}),"\n","\u2705 ",(0,s.jsx)(n.strong,{children:"Flexible Components"}),": Supports both compiled Vue components and template-based definitions"]}),"\n",(0,s.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"pnpm add @atomic-testing/vue-3\n"})}),"\n",(0,s.jsx)(n.h2,{id:"architecture",children:"Architecture"}),"\n",(0,s.jsx)(n.h3,{id:"vueinteractor",children:"VueInteractor"}),"\n",(0,s.jsx)(n.p,{children:"Extends the base DOMInteractor with Vue-specific reactivity handling:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Automatically calls ",(0,s.jsx)(n.code,{children:"nextTick()"})," after each interaction"]}),"\n",(0,s.jsx)(n.li,{children:"Ensures Vue's reactive updates complete before proceeding"}),"\n",(0,s.jsx)(n.li,{children:"Provides reliable, predictable testing experience"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"test-engine-factory",children:"Test Engine Factory"}),"\n",(0,s.jsx)(n.p,{children:"Two main functions for different testing scenarios:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"createTestEngine()"})}),": Renders and tests Vue components"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"createRenderedTestEngine()"})}),": Tests already-rendered components (e.g., Storybook)"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"framework-integration",children:"Framework Integration"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Uses ",(0,s.jsx)(n.code,{children:"@testing-library/vue"})," for component rendering with fallback strategies"]}),"\n",(0,s.jsx)(n.li,{children:"Maintains the same ComponentDriver API as React adapters"}),"\n",(0,s.jsx)(n.li,{children:"Enables cross-framework driver reuse"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,s.jsx)(n.h3,{id:"basic-example",children:"Basic Example"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"import { HTMLButtonDriver } from '@atomic-testing/component-driver-html';\nimport { byDataTestId } from '@atomic-testing/core';\nimport { createTestEngine } from '@atomic-testing/vue-3';\n\nimport CounterComponent from './Counter.vue';\n\nconst engine = createTestEngine(CounterComponent, {\n  incrementButton: {\n    locator: byDataTestId('increment'),\n    driver: HTMLButtonDriver,\n  },\n});\n\n// Test interaction - automatically handles Vue reactivity\nawait engine.parts.incrementButton.click();\nexpect(await engine.parts.incrementButton.getText()).toBe('Count: 1');\n"})}),"\n",(0,s.jsx)(n.h3,{id:"sfc-like-components",children:"SFC-Like Components"}),"\n",(0,s.jsx)(n.p,{children:"For simplified testing, you can define components using template strings:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"import { createTestEngine } from '@atomic-testing/vue-3';\n\nconst TestComponent = {\n  template: `\n    <div>\n      <button @click=\"increment\" data-testid=\"counter\">\n        Count: {{ count }}\n      </button>\n    </div>\n  `,\n  setup() {\n    const count = ref(0);\n    const increment = () => count.value++;\n    return { count, increment };\n  },\n};\n\nconst engine = createTestEngine(TestComponent, {\n  button: { locator: byDataTestId('counter'), driver: HTMLButtonDriver },\n});\n"})}),"\n",(0,s.jsx)(n.h3,{id:"testing-rendered-components",children:"Testing Rendered Components"}),"\n",(0,s.jsx)(n.p,{children:"For components already rendered in the DOM (e.g., Storybook):"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"import { createRenderedTestEngine } from '@atomic-testing/vue-3';\n\nconst engine = createRenderedTestEngine({\n  button: { locator: byDataTestId('counter'), driver: HTMLButtonDriver },\n});\n\n// Test the already-rendered component\nawait engine.parts.button.click();\n"})}),"\n",(0,s.jsx)(n.h2,{id:"cross-framework-compatibility",children:"Cross-Framework Compatibility"}),"\n",(0,s.jsx)(n.p,{children:"The same component drivers work across all Atomic Testing adapters:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Works identically in React, Vue, and Playwright\nconst parts = {\n  emailInput: { locator: byDataTestId('email'), driver: TextFieldDriver },\n  submitButton: { locator: byDataTestId('submit'), driver: ButtonDriver }\n};\n\n// React\nconst reactEngine = createTestEngine(<LoginForm />, parts);\n\n// Vue 3\nconst vueEngine = createTestEngine(LoginFormVue, parts);\n\n// Playwright\nconst playwrightEngine = createTestEngine(page, parts);\n"})}),"\n",(0,s.jsx)(n.h2,{id:"integration-with-vue-ecosystem",children:"Integration with Vue Ecosystem"}),"\n",(0,s.jsx)(n.h3,{id:"vue-testing-library",children:"Vue Testing Library"}),"\n",(0,s.jsxs)(n.p,{children:["The adapter uses ",(0,s.jsx)(n.code,{children:"@testing-library/vue"})," internally with intelligent fallback strategies for component rendering."]}),"\n",(0,s.jsx)(n.h3,{id:"vue-reactivity",children:"Vue Reactivity"}),"\n",(0,s.jsx)(n.p,{children:"All interactions automatically wait for Vue's reactivity cycle to complete:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// This automatically calls nextTick() after the click\nawait engine.parts.button.click();\n\n// Reactive state is guaranteed to be updated here\nconst updatedText = await engine.parts.button.getText();\n"})}),"\n",(0,s.jsx)(n.h3,{id:"typescript-support",children:"TypeScript Support"}),"\n",(0,s.jsx)(n.p,{children:"Full TypeScript support with proper Vue component typing:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"import type { Component } from 'vue';\n\nconst engine = createTestEngine<Component>(MyVueComponent, sceneParts);\n"})}),"\n",(0,s.jsx)(n.h2,{id:"why-use-atomic-testingvue-3",children:"Why Use @atomic-testing/vue-3?"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Consistent Testing Patterns"}),": Learn once, test everywhere - same patterns work across React, Vue, and E2E"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Reliable Vue Integration"}),": Proper handling of Vue's reactivity ensures tests aren't flaky"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"High-Level APIs"}),": Focus on user interactions, not DOM implementation details"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Framework Agnostic Drivers"}),": Reuse component drivers across different frameworks and test environments"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Future-Proof"}),": As your app grows or changes frameworks, your test patterns remain consistent"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"classes",children:"Classes"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"/docs/api/@atomic-testing/vue-3/classes/VueInteractor",children:"VueInteractor"})}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"interfaces",children:"Interfaces"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"/docs/api/@atomic-testing/vue-3/interfaces/IVueTestEngineOption",children:"IVueTestEngineOption"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"/docs/api/@atomic-testing/vue-3/interfaces/VueSFCLikeComponent",children:"VueSFCLikeComponent"})}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"functions",children:"Functions"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"/docs/api/@atomic-testing/vue-3/functions/createRenderedTestEngine",children:"createRenderedTestEngine"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"/docs/api/@atomic-testing/vue-3/functions/createTestEngine",children:"createTestEngine"})}),"\n"]})]})}function u(e={}){let{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},91261:function(e,n,t){t.d(n,{Z:()=>c,a:()=>a});var i=t(73749);let s={},r=i.createContext(s);function a(e){let n=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);