"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[523],{4852:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>f});var r=n(9231);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=l(n),d=a,f=p["".concat(c,".").concat(d)]||p[d]||m[d]||o;return n?r.createElement(f,i(i({ref:t},u),{},{components:n})):r.createElement(f,i({ref:t},u))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[p]="string"==typeof e?e:a,i[1]=s;for(var l=2;l<o;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},7715:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>N,contentTitle:()=>S,default:()=>L,frontMatter:()=>I,metadata:()=>x,toc:()=>D});var r=n(5675),a=n(9231),o=n(4852),i=n(9841),s=n(2161),c=n(9409),l=n(3262),u=n(7578),p=n(18);function m(e){return function(e){return a.Children.map(e,(e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:r,default:a}}=e;return{value:t,label:n,attributes:r,default:a}}))}function d(e){const{values:t,children:n}=e;return(0,a.useMemo)((()=>{const e=t??m(n);return function(e){const t=(0,u.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function f(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function g(e){let{queryString:t=!1,groupId:n}=e;const r=(0,c.k6)(),o=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,l._X)(o),(0,a.useCallback)((e=>{if(!o)return;const t=new URLSearchParams(r.location.search);t.set(o,e),r.replace({...r.location,search:t.toString()})}),[o,r])]}function b(e){const{defaultValue:t,queryString:n=!1,groupId:r}=e,o=d(e),[i,s]=(0,a.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!f({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const r=n.find((e=>e.default))??n[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:t,tabValues:o}))),[c,l]=g({queryString:n,groupId:r}),[u,m]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[r,o]=(0,p.Nk)(n);return[r,(0,a.useCallback)((e=>{n&&o.set(e)}),[n,o])]}({groupId:r}),b=(()=>{const e=c??u;return f({value:e,tabValues:o})?e:null})();(0,a.useLayoutEffect)((()=>{b&&s(b)}),[b]);return{selectedValue:i,selectValue:(0,a.useCallback)((e=>{if(!f({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);s(e),l(e),m(e)}),[l,m,o]),tabValues:o}}var h=n(9102);const v={tabList:"tabList__8qL",tabItem:"tabItem_lXTX"};function y(e){let{className:t,block:n,selectedValue:o,selectValue:c,tabValues:l}=e;const u=[],{blockElementScrollPositionUntilNextRender:p}=(0,s.o5)(),m=e=>{const t=e.currentTarget,n=u.indexOf(t),r=l[n].value;r!==o&&(p(t),c(r))},d=e=>{let t=null;switch(e.key){case"Enter":m(e);break;case"ArrowRight":{const n=u.indexOf(e.currentTarget)+1;t=u[n]??u[0];break}case"ArrowLeft":{const n=u.indexOf(e.currentTarget)-1;t=u[n]??u[u.length-1];break}}t?.focus()};return a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":n},t)},l.map((e=>{let{value:t,label:n,attributes:s}=e;return a.createElement("li",(0,r.Z)({role:"tab",tabIndex:o===t?0:-1,"aria-selected":o===t,key:t,ref:e=>u.push(e),onKeyDown:d,onClick:m},s,{className:(0,i.Z)("tabs__item",v.tabItem,s?.className,{"tabs__item--active":o===t})}),n??t)})))}function k(e){let{lazy:t,children:n,selectedValue:r}=e;const o=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=o.find((e=>e.props.value===r));return e?(0,a.cloneElement)(e,{className:"margin-top--md"}):null}return a.createElement("div",{className:"margin-top--md"},o.map(((e,t)=>(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==r}))))}function T(e){const t=b(e);return a.createElement("div",{className:(0,i.Z)("tabs-container",v.tabList)},a.createElement(y,(0,r.Z)({},e,t)),a.createElement(k,(0,r.Z)({},e,t)))}function w(e){const t=(0,h.Z)();return a.createElement(T,(0,r.Z)({key:String(t)},e))}const E={tabItem:"tabItem_xNeR"};function P(e){let{children:t,hidden:n,className:r}=e;return a.createElement("div",{role:"tabpanel",className:(0,i.Z)(E.tabItem,r),hidden:n},t)}const I={id:"concepts",sidebar_position:2},S="Core Concepts",x={unversionedId:"concepts",id:"concepts",title:"Core Concepts",description:"Below are a few key concepts that you should be familiar with before you start using Atomic Testing.",source:"@site/docs/core-concepts.mdx",sourceDirName:".",slug:"/concepts",permalink:"/docs/concepts",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/core-concepts.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{id:"concepts",sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Introduction",permalink:"/docs/intro"},next:{title:"Example",permalink:"/docs/example"}},N={},D=[{value:"Component Driver",id:"component-driver",level:2},{value:"Locator",id:"locator",level:2},{value:"ScenePart",id:"scenepart",level:2},{value:"Test Engine",id:"test-engine",level:2}],O={toc:D},C="wrapper";function L(e){let{components:t,...n}=e;return(0,o.kt)(C,(0,r.Z)({},O,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"core-concepts"},"Core Concepts"),(0,o.kt)("p",null,"Below are a few key concepts that you should be familiar with before you start using Atomic Testing."),(0,o.kt)("h2",{id:"component-driver"},"Component Driver"),(0,o.kt)("p",null,"Component drivers are the core of Atomic Testing. They are responsible for describing how to interact with UI components programmatically, such as how to click on a button, select a value from a dropdown, or read a row from a grid."),(0,o.kt)("p",null,"There are growing number of component drivers available for popular UI frameworks such as Material UI, each component offers a set of methods that can be used to interact with the component. If TypeScript is used for writing tests,\nauto-completion can be used to discover the available methods."),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"See ",(0,o.kt)("a",{parentName:"p",href:"/docs/api#component-drivers"},"API Reference")," for a list of available component drivers.")),(0,o.kt)("h2",{id:"locator"},"Locator"),(0,o.kt)("p",null,"Locators are used to find a component on the page. There are number of number of locator strategies available such as byDataTestId, byRole etc."),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"Use of ",(0,o.kt)("inlineCode",{parentName:"p"},"data-testid")," attribute is recommended for finding components on the page. See ",(0,o.kt)("a",{parentName:"p",href:"/docs/best-practices#data-testid"},"Best Practices")," for more details. Use the ",(0,o.kt)("inlineCode",{parentName:"p"},"byDataTestId(value)")," API to the recommended to build locators.")),(0,o.kt)("h2",{id:"scenepart"},"ScenePart"),(0,o.kt)("p",null,"ScenePart is a map that describes all the components of interest (part) in a scene (a page or a rich UI component). Each entry in a scene part describes the part name, the locator of the component and the component driver."),(0,o.kt)("details",null,(0,o.kt)("summary",null,"A sample ScenePart of a typical login screen"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { ScenePart } from '@atomic-testing/core';\nimport { HTMLAnchorDriver, HTMLElementDriver } from '@atomic-testing/component-driver-html';\nimport { ButtonDriver, TextFieldDriver } from '@atomic-testing/component-driver-mui-v5';\n\nconst loginScenePart: ScenePart = {\n  username: {\n    locator: byDataTestId('username'),\n    driver: TextFieldDriver,\n  },\n  password: {\n    locator: byDataTestId('password'),\n    driver: TextFieldDriver,\n  },\n  error: {\n    locator: byDataTestId('error-display'),\n    driver: HTMLElementDriver,\n  },\n  submit: {\n    locator: byDataTestId('submit'),\n    driver: ButtonDriver,\n  },\n  forgetPassword: {\n    locator: byDataTestId('forget-password'),\n    driver: HTMLAnchorDriver,\n  },\n} satisfies ScenePart;\n"))),(0,o.kt)("h2",{id:"test-engine"},"Test Engine"),(0,o.kt)("p",null,"TestEngine is place where all the pieces come together. It is responsible for rendering a scene, finding all the components in the scene, and providing a set of methods to interact with the components."),(0,o.kt)("p",null,"Use ",(0,o.kt)("inlineCode",{parentName:"p"},"createTestEngine")," to create an instance of TestEngine. ",(0,o.kt)("inlineCode",{parentName:"p"},"createTestEngine")," function is specific for each rendering framework, such as React, Cypress and Playwright."),(0,o.kt)("p",null,"Below are examples of creating a Test Engine for the loginScenePart described above."),(0,o.kt)(w,{mdxType:"Tabs"},(0,o.kt)(P,{value:"react",label:"React 18+",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"import { createTestEngine } from '@atomic-testing/react';\nimport { loginScenePart } from './loginScenePart';\nimport { Login } from './components/Login';\n\nconst testEngine = createTestEngine(<Login />, loginScenePart);\n"))),(0,o.kt)(P,{value:"react-legacy",label:"React 17",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"import { createLegacyTestEngine } from '@atomic-testing/react/dist/createLegacyTestEngine';\nimport { loginScenePart } from './loginScenePart';\nimport { Login } from './components/Login';\n\nconst testEngine = createLegacyTestEngine(<Login />, loginScenePart);\n"))),(0,o.kt)(P,{value:"playwright",label:"Playwright",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"import { createTestEngine } from '@atomic-testing/playwright';\nimport { loginScenePart } from './loginScenePart';\n\nawait page.goto('/login');\nconst testEngine = createTestEngine(page, loginScenePart);\n"))),(0,o.kt)(P,{value:"cypress",label:"Cypress",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"import { createTestEngine } from '@atomic-testing/cypress';\nimport { loginScenePart } from './loginScenePart';\n\ncy.visit('/login');\nconst testEngine = createTestEngine(loginScenePart);\n")))),(0,o.kt)("p",null,"Once the test engine is created, it can be used to interact with the components in the scene."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"// Test code is agnostic to the rendering framework\n\nawait testEngine.parts.username.setValue('john@example.com');\nawait testEngine.parts.password.setValue('');\nawait testEngine.parts.submit.click();\n\nconst error = await testEngine.parts.error.getText();\nexpect(error).toEqual('Password is required'); // Jest assertion, but any assertion library can be used\n")))}L.isMDXComponent=!0}}]);