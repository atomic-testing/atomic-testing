"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([["1966"],{38885:function(e,t,n){n.r(t),n.d(t,{frontMatter:()=>a,default:()=>h,toc:()=>l,metadata:()=>i,assets:()=>o,contentTitle:()=>c});var i=JSON.parse('{"id":"api/@atomic-testing/react-19/index","title":"@atomic-testing/react-19","description":"Adapter for integrating Atomic Testing with React 19.","source":"@site/docs/api/@atomic-testing/react-19/index.md","sourceDirName":"api/@atomic-testing/react-19","slug":"/api/@atomic-testing/react-19/","permalink":"/docs/api/@atomic-testing/react-19/","draft":false,"unlisted":false,"editUrl":"https://github.com/atomic-testing/atomic-testing/tree/main/docs/docs/docs/api/@atomic-testing/react-19/index.md","tags":[],"version":"current","frontMatter":{}}'),s=n(54381),r=n(91261);let a={},c="@atomic-testing/react-19",o={},l=[{value:"The problem",id:"the-problem",level:2},{value:"The solution",id:"the-solution",level:2},{value:"Installation",id:"installation",level:2},{value:"Example",id:"example",level:2},{value:"Interfaces",id:"interfaces",level:2},{value:"Functions",id:"functions",level:2}];function d(e){let t={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"atomic-testingreact-19",children:"@atomic-testing/react-19"})}),"\n",(0,s.jsxs)(t.p,{children:["Adapter for integrating ",(0,s.jsx)(t.a,{href:"https://atomic-testing.dev",children:"Atomic Testing"})," with ",(0,s.jsx)(t.a,{href:"https://react.dev",children:"React 19"}),".\nIt maps React components to the core scene part APIs."]}),"\n",(0,s.jsx)(t.h2,{id:"the-problem",children:"The problem"}),"\n",(0,s.jsx)(t.p,{children:"Writing maintainable tests for UIs built with third\u2013party component libraries\nlike Material\xa0UI or Bootstrap can be tricky. Documentation on how a test\nshould communicate with these components is often lacking, so tests easily end\nup coupled to implementation details. As your application grows you need your\ntests to scale without constantly reworking them."}),"\n",(0,s.jsx)(t.h2,{id:"the-solution",children:"The solution"}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.a,{href:"https://atomic-testing.dev",children:"Atomic Testing"})," provides a consistent way to interact with both third\u2013party and\nfirst\u2013party components across different test environments. It focuses on\n",(0,s.jsx)(t.strong,{children:"reusability"}),", ",(0,s.jsx)(t.strong,{children:"composability"})," and ",(0,s.jsx)(t.strong,{children:"adaptability"}),", letting you build\nhigher\u2013level test strategies that work for DOM or end\u2013to\u2013end testing alike."]}),"\n",(0,s.jsx)(t.h2,{id:"installation",children:"Installation"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"npm install @atomic-testing/core @atomic-testing/react-19 --save-dev\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Refer to the ",(0,s.jsx)(t.a,{href:"https://atomic-testing.dev/",children:"React integration guide"})," for examples."]}),"\n",(0,s.jsx)(t.h2,{id:"example",children:"Example"}),"\n",(0,s.jsxs)(t.p,{children:["If you use MUI/Material\xa0UI components, have a look at the\n",(0,s.jsx)(t.a,{href:"https://www.npmjs.com/package/@atomic-testing/component-driver-mui-v7",children:"@atomic-testing/component-driver-mui-v7"}),"\npackage for a dedicated example."]}),"\n",(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsx)(t.p,{children:"Install the core library and basic HTML drivers along with this React adapter:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"npm install @atomic-testing/core @atomic-testing/react-19 @atomic-testing/component-driver-html --save-dev\n"})}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsxs)(t.p,{children:["Create a small component and assign ",(0,s.jsx)(t.code,{children:"data-testid"})," values to the elements you want to interact with:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-tsx",metastring:'title="Counter.tsx"',children:"import { useState } from 'react';\n\nexport function Counter() {\n  const [count, setCount] = useState(0);\n  return (\n    <div>\n      <span data-testid='count'>{count}</span>\n      <button data-testid='increment' onClick={() => setCount(c => c + 1)}>\n        Increment\n      </button>\n    </div>\n  );\n}\n"})}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsxs)(t.p,{children:["Define a ",(0,s.jsx)(t.code,{children:"ScenePart"})," describing the count display and button using the HTML drivers:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",metastring:'title="counterScenePart.ts"',children:"import { HTMLButtonDriver, HTMLElementDriver } from '@atomic-testing/component-driver-html';\nimport { byDataTestId, ScenePart } from '@atomic-testing/core';\n\nexport const counterScenePart = {\n  count: { locator: byDataTestId('count'), driver: HTMLElementDriver },\n  increment: { locator: byDataTestId('increment'), driver: HTMLButtonDriver },\n} satisfies ScenePart;\n"})}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsxs)(t.p,{children:["Write a test using ",(0,s.jsx)(t.code,{children:"createTestEngine"})," to render the component and interact with it:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",metastring:'title="Counter.test.tsx"',children:" import { createTestEngine } from '@atomic-testing/react-19';\n\n import { Counter } from './Counter';\n import { counterScenePart } from './counterScenePart';\n\n test('increments when the button is clicked', async () => {\n   const engine = createTestEngine(<Counter />, counterScenePart);\n\n   expect(await engine.parts.count.getText()).toBe('0');\n   await engine.parts.increment.click();\n   expect(await engine.parts.count.getText()).toBe('1');\n\n   await engine.cleanUp();\n });\n"})}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:["For more in\u2011depth information, visit\n",(0,s.jsx)(t.a,{href:"https://atomic-testing.dev",children:"https://atomic-testing.dev"}),"."]}),"\n",(0,s.jsx)(t.h2,{id:"interfaces",children:"Interfaces"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"/docs/api/@atomic-testing/react-19/interfaces/IReactTestEngineOption",children:"IReactTestEngineOption"})}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"functions",children:"Functions"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"/docs/api/@atomic-testing/react-19/functions/createRenderedTestEngine",children:"createRenderedTestEngine"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"/docs/api/@atomic-testing/react-19/functions/createTestEngine",children:"createTestEngine"})}),"\n"]})]})}function h(e={}){let{wrapper:t}={...(0,r.a)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},91261:function(e,t,n){n.d(t,{Z:()=>c,a:()=>a});var i=n(73749);let s={},r=i.createContext(s);function a(e){let t=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(r.Provider,{value:t},e.children)}}}]);