"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([["7456"],{1105:function(e,n,t){t.r(n),t.d(n,{frontMatter:()=>l,toc:()=>u,default:()=>m,metadata:()=>r,assets:()=>d,contentTitle:()=>c});var r=JSON.parse('{"id":"why-atomic-testing","title":"Why Atomic Testing?","description":"The Learning Investment vs. Long-term Payoff","source":"@site/docs/why-atomic-testing.mdx","sourceDirName":".","slug":"/why-atomic-testing","permalink":"/docs/why-atomic-testing","draft":false,"unlisted":false,"editUrl":"https://github.com/atomic-testing/atomic-testing/tree/main/docs/docs/docs/why-atomic-testing.mdx","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"id":"why-atomic-testing","title":"Why Atomic Testing?","sidebar_label":"Why Atomic Testing?","sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Which Packages?","permalink":"/docs/framework-guide"},"next":{"title":"Step-by-Step Tutorial","permalink":"/docs/tutorial"}}'),i=t(54381),s=t(91261),a=t(3707),o=t(48242);let l={id:"why-atomic-testing",title:"Why Atomic Testing?",sidebar_label:"Why Atomic Testing?",sidebar_position:3},c="Why Atomic Testing?",d={},u=[{value:"The Learning Investment vs. Long-term Payoff",id:"the-learning-investment-vs-long-term-payoff",level:2},{value:"<strong>Initial Setup</strong> (One-time cost)",id:"initial-setup-one-time-cost",level:3},{value:"<strong>But Then Everything Becomes Simple</strong>",id:"but-then-everything-becomes-simple",level:3},{value:"<strong>Real-world Scenarios Where Atomic Testing Shines</strong>",id:"real-world-scenarios-where-atomic-testing-shines",level:2},{value:"<strong>\u{1F504} Framework Migration</strong>",id:"-framework-migration",level:3},{value:"<strong>\u{1F4DA} Component Library Updates</strong>",id:"-component-library-updates",level:3},{value:"<strong>\u{1F9EA} Multi-Environment Testing</strong>",id:"-multi-environment-testing",level:3},{value:"<strong>Developer Experience Over Time</strong>",id:"developer-experience-over-time",level:2},{value:"<strong>Week 1</strong>: &quot;This seems like extra work...&quot;",id:"week-1-this-seems-like-extra-work",level:3},{value:"<strong>Month 3</strong>: &quot;Wait, this is actually easier...&quot;",id:"month-3-wait-this-is-actually-easier",level:3},{value:"<strong>Year 1</strong>: &quot;I can&#39;t imagine testing any other way&quot;",id:"year-1-i-cant-imagine-testing-any-other-way",level:3},{value:"<strong>The ROI Calculation</strong>",id:"the-roi-calculation",level:2},{value:"<strong>Traditional Testing</strong>",id:"traditional-testing",level:3},{value:"<strong>Atomic Testing</strong>",id:"atomic-testing",level:3},{value:"<strong>When NOT to Use Atomic Testing</strong>",id:"when-not-to-use-atomic-testing",level:2},{value:"<strong>Getting Started Despite the Learning Curve</strong>",id:"getting-started-despite-the-learning-curve",level:2},{value:"<strong>Start Small</strong>",id:"start-small",level:3},{value:"<strong>Gradual Adoption</strong>",id:"gradual-adoption",level:3},{value:"<strong>Measure the Impact</strong>",id:"measure-the-impact",level:3}];function h(e){let n={code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"why-atomic-testing",children:"Why Atomic Testing?"})}),"\n",(0,i.jsx)(n.h2,{id:"the-learning-investment-vs-long-term-payoff",children:"The Learning Investment vs. Long-term Payoff"}),"\n",(0,i.jsxs)(n.h3,{id:"initial-setup-one-time-cost",children:[(0,i.jsx)(n.strong,{children:"Initial Setup"})," (One-time cost)"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// Yes, there's initial setup...\nconst loginScene = {\n  email: { locator: byDataTestId('email'), driver: TextFieldDriver },\n  password: { locator: byDataTestId('password'), driver: TextFieldDriver },\n  submit: { locator: byDataTestId('submit'), driver: ButtonDriver },\n  error: { locator: byDataTestId('error'), driver: HTMLComponentDriver },\n} satisfies ScenePart;\n"})}),"\n",(0,i.jsx)(n.h3,{id:"but-then-everything-becomes-simple",children:(0,i.jsx)(n.strong,{children:"But Then Everything Becomes Simple"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// Tests become incredibly readable\nawait testEngine.parts.email.setValue('user@example.com');\nawait testEngine.parts.password.setValue('secure123');\nawait testEngine.parts.submit.click();\n\nexpect(await testEngine.parts.error.isVisible()).toBe(false);\n\n// And they work everywhere:\n// \u2705 React DOM tests\n// \u2705 Vue DOM tests\n// \u2705 Playwright E2E tests\n// \u2705 Future framework migrations\n"})}),"\n",(0,i.jsx)(n.h2,{id:"real-world-scenarios-where-atomic-testing-shines",children:(0,i.jsx)(n.strong,{children:"Real-world Scenarios Where Atomic Testing Shines"})}),"\n",(0,i.jsx)(n.h3,{id:"-framework-migration",children:(0,i.jsx)(n.strong,{children:"\u{1F504} Framework Migration"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"The nightmare scenario that Atomic Testing makes trivial"})}),"\n",(0,i.jsxs)(o.Z,{children:[(0,i.jsxs)(a.Z,{value:"before",label:"\u{1F631} Traditional Approach",children:[(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// React Testing Library\nconst emailInput = screen.getByLabelText(/email/i);\nconst submitButton = screen.getByRole('button', { name: /submit/i });\nfireEvent.change(emailInput, { target: { value: 'user@example.com' }});\nfireEvent.click(submitButton);\n\n// Vue Test Utils (completely different!)\nconst wrapper = mount(LoginForm);\nconst emailInput = wrapper.find('[data-testid=\"email\"]');\nconst submitButton = wrapper.find('[data-testid=\"submit\"]');\nawait emailInput.setValue('user@example.com');\nawait submitButton.trigger('click');\n\n// Playwright (different again!)\nawait page.locator('[data-testid=\"email\"]').fill('user@example.com');\nawait page.locator('[data-testid=\"submit\"]').click();\n"})}),(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Result"}),": Complete test rewrite for every framework change \u{1F62D}"]})]}),(0,i.jsxs)(a.Z,{value:"after",label:"\u2728 Atomic Testing Approach",children:[(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// Define once\nconst loginScene = {\n  email: { locator: byDataTestId('email'), driver: TextFieldDriver },\n  submit: { locator: byDataTestId('submit'), driver: ButtonDriver }\n};\n\n// Works everywhere with identical code:\n\n// React\nconst reactEngine = createTestEngine(<LoginForm />, loginScene);\n\n// Vue\nconst vueEngine = createTestEngine(LoginFormVue, loginScene);\n\n// Playwright\nconst e2eEngine = createTestEngine(page, loginScene);\n\n// Same test logic for all! \u2728\nawait testEngine.parts.email.setValue('user@example.com');\nawait testEngine.parts.submit.click();\n"})}),(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Result"}),": Zero test rewrite. Just change the engine creation! \u{1F389}"]})]})]}),"\n",(0,i.jsx)(n.h3,{id:"-component-library-updates",children:(0,i.jsx)(n.strong,{children:"\u{1F4DA} Component Library Updates"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"When Material-UI releases breaking changes"})}),"\n",(0,i.jsxs)(o.Z,{children:[(0,i.jsx)(a.Z,{value:"traditional",label:"\u{1F631} Traditional Approach",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// Material-UI v5 \u2192 v6 upgrade breaks everything\n// Before v6:\nconst button = screen.getByRole('button');\nexpect(button).toHaveClass('MuiButton-containedPrimary');\n\n// After v6: Classes changed!\nexpect(button).toHaveClass('MuiButton-contained MuiButton-colorPrimary');\n\n// Hundreds of tests need manual updates \u{1F62D}\n"})})}),(0,i.jsxs)(a.Z,{value:"atomic",label:"\u2728 Atomic Testing Approach",children:[(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// Material-UI v6 \u2192 v7 upgrade? Change one import:\n\n// Before\nimport { ButtonDriver } from '@atomic-testing/component-driver-mui-v6';\n\n// After\nimport { ButtonDriver } from '@atomic-testing/component-driver-mui-v7';\n\n// All test logic unchanged! \u2728\nawait testEngine.parts.submit.click();\nexpect(await testEngine.parts.submit.isDisabled()).toBe(false);\n"})}),(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Result"}),": One import change vs. hundreds of test updates \u{1F680}"]})]})]}),"\n",(0,i.jsx)(n.h3,{id:"-multi-environment-testing",children:(0,i.jsx)(n.strong,{children:"\u{1F9EA} Multi-Environment Testing"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"Same logic, different speeds"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// Define your test logic once\nasync function validatePaymentFlow(testEngine) {\n  await testEngine.parts.creditCard.setValue('4111111111111111');\n  await testEngine.parts.expiryDate.setValue('12/25');\n  await testEngine.parts.cvv.setValue('123');\n  await testEngine.parts.submit.click();\n\n  expect(await testEngine.parts.successMessage.isVisible()).toBe(true);\n}\n\n// Run fast during development (DOM test - 100ms)\nconst domEngine = createTestEngine(<PaymentForm />, paymentScene);\nawait validatePaymentFlow(domEngine);\n\n// Run comprehensive before deploy (E2E test - 2 seconds)\nconst e2eEngine = createTestEngine(page, paymentScene);\nawait validatePaymentFlow(e2eEngine); // Same function! \u2728\n"})}),"\n",(0,i.jsx)(n.h2,{id:"developer-experience-over-time",children:(0,i.jsx)(n.strong,{children:"Developer Experience Over Time"})}),"\n",(0,i.jsxs)(n.h3,{id:"week-1-this-seems-like-extra-work",children:[(0,i.jsx)(n.strong,{children:"Week 1"}),': "This seems like extra work..."']}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// Traditional approach (seems simpler)\nconst button = screen.getByRole('button', { name: /submit/i });\nfireEvent.click(button);\n\n// vs Atomic Testing (more setup)\nconst scene = { submit: { locator: byDataTestId('submit'), driver: ButtonDriver }};\nconst engine = createTestEngine(<Form />, scene);\nawait engine.parts.submit.click();\n"})}),"\n",(0,i.jsxs)(n.h3,{id:"month-3-wait-this-is-actually-easier",children:[(0,i.jsx)(n.strong,{children:"Month 3"}),': "Wait, this is actually easier..."']}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// Complex interactions become trivial\nawait testEngine.parts.form.fillAndSubmit({\n  email: 'user@example.com',\n  password: 'secure123',\n  confirmPassword: 'secure123',\n  agreeToTerms: true,\n});\n\n// vs traditional approach\nconst emailInput = screen.getByLabelText(/email/i);\nconst passwordInput = screen.getByLabelText(/^password$/i);\nconst confirmInput = screen.getByLabelText(/confirm password/i);\nconst checkbox = screen.getByRole('checkbox', { name: /agree to terms/i });\nconst submitButton = screen.getByRole('button', { name: /submit/i });\n\nfireEvent.change(emailInput, { target: { value: 'user@example.com' } });\nfireEvent.change(passwordInput, { target: { value: 'secure123' } });\nfireEvent.change(confirmInput, { target: { value: 'secure123' } });\nfireEvent.click(checkbox);\nfireEvent.click(submitButton);\n"})}),"\n",(0,i.jsxs)(n.h3,{id:"year-1-i-cant-imagine-testing-any-other-way",children:[(0,i.jsx)(n.strong,{children:"Year 1"}),': "I can\'t imagine testing any other way"']}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\u2705 ",(0,i.jsx)(n.strong,{children:"Tests survive major refactors"})," - Component internals change, tests don't break"]}),"\n",(0,i.jsxs)(n.li,{children:["\u2705 ",(0,i.jsx)(n.strong,{children:"New team members understand tests immediately"})," - High-level semantic APIs"]}),"\n",(0,i.jsxs)(n.li,{children:["\u2705 ",(0,i.jsx)(n.strong,{children:"E2E and unit tests share patterns"})," - Same mental model everywhere"]}),"\n",(0,i.jsxs)(n.li,{children:["\u2705 ",(0,i.jsx)(n.strong,{children:"Component library upgrades don't break tests"})," - Driver updates handle breaking changes"]}),"\n",(0,i.jsxs)(n.li,{children:["\u2705 ",(0,i.jsx)(n.strong,{children:"Framework migrations become feasible"})," - Test logic transfers completely"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"the-roi-calculation",children:(0,i.jsx)(n.strong,{children:"The ROI Calculation"})}),"\n",(0,i.jsx)(n.h3,{id:"traditional-testing",children:(0,i.jsx)(n.strong,{children:"Traditional Testing"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\u274C ",(0,i.jsx)(n.strong,{children:"Framework migration"}),": 100% test rewrite"]}),"\n",(0,i.jsxs)(n.li,{children:["\u274C ",(0,i.jsx)(n.strong,{children:"Library upgrades"}),": Manual updates to hundreds of tests"]}),"\n",(0,i.jsxs)(n.li,{children:["\u274C ",(0,i.jsx)(n.strong,{children:"New team members"}),": Learn different patterns for DOM vs E2E"]}),"\n",(0,i.jsxs)(n.li,{children:["\u274C ",(0,i.jsx)(n.strong,{children:"Refactoring"}),": Tests break when implementation changes"]}),"\n",(0,i.jsxs)(n.li,{children:["\u274C ",(0,i.jsx)(n.strong,{children:"Multi-environment"}),": Duplicate test logic across DOM/E2E"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"atomic-testing",children:(0,i.jsx)(n.strong,{children:"Atomic Testing"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\u2705 ",(0,i.jsx)(n.strong,{children:"Framework migration"}),": Change engine creation only"]}),"\n",(0,i.jsxs)(n.li,{children:["\u2705 ",(0,i.jsx)(n.strong,{children:"Library upgrades"}),": Update driver package version"]}),"\n",(0,i.jsxs)(n.li,{children:["\u2705 ",(0,i.jsx)(n.strong,{children:"New team members"}),": Learn once, test everywhere"]}),"\n",(0,i.jsxs)(n.li,{children:["\u2705 ",(0,i.jsx)(n.strong,{children:"Refactoring"}),": Tests focus on behavior, not implementation"]}),"\n",(0,i.jsxs)(n.li,{children:["\u2705 ",(0,i.jsx)(n.strong,{children:"Multi-environment"}),": Share test logic across environments"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"when-not-to-use-atomic-testing",children:(0,i.jsx)(n.strong,{children:"When NOT to Use Atomic Testing"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Be honest with yourself:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Prototype/throwaway projects"})," - If you're never maintaining this code"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Single simple component"})," - If you're testing one button, traditional approaches are fine"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Team unwilling to learn"})," - The initial learning curve requires buy-in"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"No component library"})," - If you're not using MUI/Bootstrap/etc, benefit is reduced"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"getting-started-despite-the-learning-curve",children:(0,i.jsx)(n.strong,{children:"Getting Started Despite the Learning Curve"})}),"\n",(0,i.jsx)(n.h3,{id:"start-small",children:(0,i.jsx)(n.strong,{children:"Start Small"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// Don't try to convert everything at once\n// Start with one complex component that you test frequently\nconst checkoutScene = {\n  submit: { locator: byDataTestId('checkout-submit'), driver: ButtonDriver },\n};\n"})}),"\n",(0,i.jsx)(n.h3,{id:"gradual-adoption",children:(0,i.jsx)(n.strong,{children:"Gradual Adoption"})}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Week 1"}),": Use Atomic Testing for new tests only"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Month 1"}),": Convert your most frequently changed tests"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Month 3"}),": Migrate tests that break often during refactors"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Month 6"}),": Full adoption for new features"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"measure-the-impact",children:(0,i.jsx)(n.strong,{children:"Measure the Impact"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Time saved"})," during component library upgrades"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Reduced friction"})," when adding E2E coverage"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Faster onboarding"})," for new team members"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Fewer test failures"})," during refactoring"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"The initial investment pays compound interest over time. The question isn't whether to adopt Atomic Testing\u2014it's whether you can afford not to."}),"\n",(0,i.jsxs)("div",{className:"card-container",style:{display:"flex",gap:"1rem",marginTop:"2rem"},children:[(0,i.jsxs)("div",{className:"card",children:[(0,i.jsx)("div",{className:"card__header",children:(0,i.jsx)("h3",{children:"\u{1F680} Ready to Start?"})}),(0,i.jsxs)("div",{className:"card__body",children:[(0,i.jsx)("p",{children:"Convinced? Let's build your first test and see the benefits firsthand."}),(0,i.jsx)("a",{href:"./first-test",className:"button button--primary",children:(0,i.jsx)(n.p,{children:"Start Tutorial \u2192"})})]})]}),(0,i.jsxs)("div",{className:"card",children:[(0,i.jsx)("div",{className:"card__header",children:(0,i.jsx)("h3",{children:"\u{1F914} Still Have Questions?"})}),(0,i.jsxs)("div",{className:"card__body",children:[(0,i.jsx)("p",{children:"Check our FAQ for common concerns and detailed comparisons."}),(0,i.jsx)("a",{href:"./faq",className:"button button--secondary",children:(0,i.jsx)(n.p,{children:"Read FAQ \u2192"})})]})]})]})]})}function m(e={}){let{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},3707:function(e,n,t){t.d(n,{Z:()=>s});var r=t(54381);t(73749);var i=t(90620);function s({children:e,hidden:n,className:t}){return(0,r.jsx)("div",{role:"tabpanel",className:(0,i.Z)("tabItem_HxCO",t),hidden:n,children:e})}},48242:function(e,n,t){t.d(n,{Z:()=>j});var r=t(54381),i=t(73749),s=t(90620),a=t(52292),o=t(61456),l=t(79650),c=t(2582),d=t(18951),u=t(65782);function h(e){return i.Children.toArray(e).filter(e=>"\n"!==e).map(e=>{if(!e||(0,i.isValidElement)(e)&&function(e){let{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})?.filter(Boolean)??[]}function m({value:e,tabValues:n}){return n.some(n=>n.value===e)}var g=t(53419);function p({className:e,block:n,selectedValue:t,selectValue:i,tabValues:o}){let l=[],{blockElementScrollPositionUntilNextRender:c}=(0,a.o5)(),d=e=>{let n=e.currentTarget,r=o[l.indexOf(n)].value;r!==t&&(c(n),i(r))},u=e=>{let n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{let t=l.indexOf(e.currentTarget)+1;n=l[t]??l[0];break}case"ArrowLeft":{let t=l.indexOf(e.currentTarget)-1;n=l[t]??l[l.length-1]}}n?.focus()};return(0,r.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.Z)("tabs",{"tabs--block":n},e),children:o.map(({value:e,label:n,attributes:i})=>(0,r.jsx)("li",{role:"tab",tabIndex:t===e?0:-1,"aria-selected":t===e,ref:e=>{l.push(e)},onKeyDown:u,onClick:d,...i,className:(0,s.Z)("tabs__item","tabItem_gpqn",i?.className,{"tabs__item--active":t===e}),children:n??e},e))})}function x({lazy:e,children:n,selectedValue:t}){let a=(Array.isArray(n)?n:[n]).filter(Boolean);if(e){let e=a.find(e=>e.props.value===t);return e?(0,i.cloneElement)(e,{className:(0,s.Z)("margin-top--md",e.props.className)}):null}return(0,r.jsx)("div",{className:"margin-top--md",children:a.map((e,n)=>(0,i.cloneElement)(e,{key:n,hidden:e.props.value!==t}))})}function v(e){let n=function(e){let{defaultValue:n,queryString:t=!1,groupId:r}=e,s=function(e){let{values:n,children:t}=e;return(0,i.useMemo)(()=>{let e=n??h(t).map(({props:{value:e,label:n,attributes:t,default:r}})=>({value:e,label:n,attributes:t,default:r})),r=(0,d.lx)(e,(e,n)=>e.value===n.value);if(r.length>0)throw Error(`Docusaurus error: Duplicate values "${r.map(e=>e.value).join(", ")}" found in <Tabs>. Every value needs to be unique.`);return e},[n,t])}(e),[a,g]=(0,i.useState)(()=>(function({defaultValue:e,tabValues:n}){if(0===n.length)throw Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!m({value:e,tabValues:n}))throw Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${n.map(e=>e.value).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}let t=n.find(e=>e.default)??n[0];if(!t)throw Error("Unexpected error: 0 tabValues");return t.value})({defaultValue:n,tabValues:s})),[p,x]=function({queryString:e=!1,groupId:n}){let t=(0,o.k6)(),r=function({queryString:e=!1,groupId:n}){if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!n)throw Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:e,groupId:n});return[(0,c._X)(r),(0,i.useCallback)(e=>{if(!r)return;let n=new URLSearchParams(t.location.search);n.set(r,e),t.replace({...t.location,search:n.toString()})},[r,t])]}({queryString:t,groupId:r}),[v,j]=function({groupId:e}){let n=e?`docusaurus.tab.${e}`:null,[t,r]=(0,u.Nk)(n);return[t,(0,i.useCallback)(e=>{n&&r.set(e)},[n,r])]}({groupId:r}),f=(()=>{let e=p??v;return m({value:e,tabValues:s})?e:null})();return(0,l.Z)(()=>{f&&g(f)},[f]),{selectedValue:a,selectValue:(0,i.useCallback)(e=>{if(!m({value:e,tabValues:s}))throw Error(`Can't select invalid tab value=${e}`);g(e),x(e),j(e)},[x,j,s]),tabValues:s}}(e);return(0,r.jsxs)("div",{className:(0,s.Z)("tabs-container","tabList_l3V7"),children:[(0,r.jsx)(p,{...n,...e}),(0,r.jsx)(x,{...n,...e})]})}function j(e){let n=(0,g.Z)();return(0,r.jsx)(v,{...e,children:h(e.children)},String(n))}},91261:function(e,n,t){t.d(n,{Z:()=>o,a:()=>a});var r=t(73749);let i={},s=r.createContext(i);function a(e){let n=r.useContext(s);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);