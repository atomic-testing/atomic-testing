"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3983],{2521:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>c,default:()=>u,frontMatter:()=>l,metadata:()=>s,toc:()=>h});const s=JSON.parse('{"id":"tutorial","title":"Step-by-Step Tutorial","description":"This tutorial walks you through the example-mui-signup-form found in the examples folder.  You may run and see it live in Codesandbox. It demonstrates how to run the example application and introduces the basic Atomic Testing APIs for writing tests. Component drivers work the same in isolated unit tests or full browser tests so the code you see here applies to both environments.","source":"@site/docs/getting-started-tutorial.mdx","sourceDirName":".","slug":"/tutorial","permalink":"/docs/tutorial","draft":false,"unlisted":false,"editUrl":"https://github.com/atomic-testing/atomic-testing/tree/main/docs/docs/docs/getting-started-tutorial.mdx","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"id":"tutorial","title":"Step-by-Step Tutorial","sidebar_position":5},"sidebar":"tutorialSidebar","previous":{"title":"API overview","permalink":"/docs/api-overview"},"next":{"title":"Best Practices","permalink":"/docs/best-practices"}}');var i=n(7968),r=n(4318),a=n(8539);const o="import { createTestEngine } from '@atomic-testing/playwright';\nimport { expect, test } from '@playwright/test';\n\nimport { getGoodCredentialMock } from './__mocks__/signup';\nimport { parts } from './signupScenePart';\n\n// Shortened end-to-end test using Playwright\n\ntest('user can sign up', async ({ page }) => {\n  await page.goto('/');\n  const engine = createTestEngine(page, parts);\n\n  await engine.parts.credentialStep.setValue(getGoodCredentialMock());\n  await engine.parts.credentialStep.next();\n  await expect(await engine.parts.shippingStep.isVisible()).toBe(true);\n});\n";var d=n(7361);const l={id:"tutorial",title:"Step-by-Step Tutorial",sidebar_position:5},c=void 0,p={},h=[{value:"1. Install dependencies",id:"1-install-dependencies",level:2},{value:"2. Start the example application",id:"2-start-the-example-application",level:2},{value:"3. Run the component tests",id:"3-run-the-component-tests",level:2},{value:"4. Run the end\u2011to\u2011end test",id:"4-run-the-endtoend-test",level:2},{value:"5. Explore Storybook (optional)",id:"5-explore-storybook-optional",level:2},{value:"6. Write your first Atomic test",id:"6-write-your-first-atomic-test",level:2},{value:"Declare <code>data-testid</code>",id:"declare-data-testid",level:3},{value:"Define a ScenePart",id:"define-a-scenepart",level:3},{value:"Instantiate the Test Engine and write a test",id:"instantiate-the-test-engine-and-write-a-test",level:3},{value:"7. Build a form driver",id:"7-build-a-form-driver",level:2},{value:"8. Write an end-to-end test",id:"8-write-an-end-to-end-test",level:2},{value:"Next steps",id:"next-steps",level:2}];function m(e){const t={a:"a",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(t.p,{children:["This tutorial walks you through the ",(0,i.jsx)(t.a,{href:"https://github.com/atomic-testing/atomic-testing/tree/main/examples/example-mui-signup-form",children:"example-mui-signup-form"})," found in the ",(0,i.jsx)(t.a,{href:"https://github.com/atomic-testing/atomic-testing/tree/main/examples",children:"examples"})," folder.  You may run and see it live in ",(0,i.jsx)(t.a,{href:"https://codesandbox.io/p/sandbox/github/atomic-testing/atomic-testing/tree/main/examples/example-mui-signup-form",children:"Codesandbox"}),". It demonstrates how to run the example application and introduces the basic ",(0,i.jsx)(t.strong,{children:"Atomic Testing"})," APIs for writing tests. Component drivers work the same in isolated unit tests or full browser tests so the code you see here applies to both environments."]}),"\n",(0,i.jsx)(t.h2,{id:"1-install-dependencies",children:"1. Install dependencies"}),"\n",(0,i.jsx)(t.p,{children:"From the repository root run:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"pnpm install\n"})}),"\n",(0,i.jsx)(t.p,{children:"The example project has its own dependencies so install them as well:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"cd examples/example-mui-signup-form\npnpm install\n"})}),"\n",(0,i.jsx)(t.h2,{id:"2-start-the-example-application",children:"2. Start the example application"}),"\n",(0,i.jsx)(t.p,{children:"Run the app locally to see the signup form in action:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"pnpm dev\n"})}),"\n",(0,i.jsxs)(t.p,{children:["Open ",(0,i.jsx)(t.a,{href:"http://localhost:5371",children:"http://localhost:5371"})," in your browser to interact with the multi\u2011step form."]}),"\n",(0,i.jsx)(t.h2,{id:"3-run-the-component-tests",children:"3. Run the component tests"}),"\n",(0,i.jsxs)(t.p,{children:["Unit tests for each form step live under their respective ",(0,i.jsx)(t.code,{children:"__tests__"})," directories. Execute them with:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"pnpm test:dom\n"})}),"\n",(0,i.jsx)(t.h2,{id:"4-run-the-endtoend-test",children:"4. Run the end\u2011to\u2011end test"}),"\n",(0,i.jsxs)(t.p,{children:["The example also includes an end\u2011to\u2011end scenario located in ",(0,i.jsx)(t.code,{children:"e2e/success.spec.ts"}),". Launch it in Chrome with:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"pnpm test:e2e:chrome\n"})}),"\n",(0,i.jsxs)(t.p,{children:["Add the ",(0,i.jsx)(t.code,{children:"--ui"})," flag to open Playwright in UI mode if you want to watch the interactions."]}),"\n",(0,i.jsx)(t.h2,{id:"5-explore-storybook-optional",children:"5. Explore Storybook (optional)"}),"\n",(0,i.jsx)(t.p,{children:"Some components contain Storybook stories with interaction tests. To view them, run:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"pnpm storybook\n"})}),"\n",(0,i.jsx)(t.h2,{id:"6-write-your-first-atomic-test",children:"6. Write your first Atomic test"}),"\n",(0,i.jsxs)(t.p,{children:["The signup form example includes unit tests written with ",(0,i.jsx)(t.strong,{children:"Atomic Testing"}),". The steps below outline the main pieces required to create a test."]}),"\n",(0,i.jsxs)(t.h3,{id:"declare-data-testid",children:["Declare ",(0,i.jsx)(t.code,{children:"data-testid"})]}),"\n",(0,i.jsxs)(t.p,{children:["Assign the ",(0,i.jsx)(t.code,{children:"data-testid"})," attribute on components that you need to interact with. This example shows the markup for the credential form:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-tsx",metastring:'title="CredentialForm.tsx"',children:"<form data-testid={DataTestId.form}>\n  <TextField data-testid={DataTestId.emailInput} label='Email' />\n  <TextField data-testid={DataTestId.passwordInput} label='Password' />\n  <WizardButton data-testid={DataTestId.navigation} onNextStep={onNextStep} />\n</form>\n"})}),"\n",(0,i.jsx)(t.h3,{id:"define-a-scenepart",children:"Define a ScenePart"}),"\n",(0,i.jsx)(t.p,{children:"Create a ScenePart describing how to locate each component and which driver to use:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",metastring:'title="credentialScenePart.ts"',children:"const parts = {\n  form: {\n    locator: byDataTestId(DataTestId.form),\n    driver: CredentialFormDriver,\n  },\n} satisfies ScenePart;\n"})}),"\n",(0,i.jsx)(t.h3,{id:"instantiate-the-test-engine-and-write-a-test",children:"Instantiate the Test Engine and write a test"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",metastring:'title="CredentialForm.test.tsx"',children:"let testEngine: TestEngine<typeof parts>;\nlet onNext: jest.Mock;\n\nbeforeEach(() => {\n  onNext = jest.fn();\n  testEngine = createTestEngineForComponent(\n    <CredentialForm data-testid={DataTestId.form} onNextStep={onNext} />,\n    parts\n  );\n});\n\nafterEach(async () => {\n  await testEngine.cleanUp();\n});\n\ntest('submits valid data', async () => {\n  await testEngine.parts.form.setValue({\n    email: 'john@example.com',\n    password: 'secret123',\n    confirmPassword: 'secret123',\n    birthday: '1990-01-01',\n  });\n  await testEngine.parts.form.next();\n  expect(onNext).toHaveBeenCalled();\n});\n"})}),"\n",(0,i.jsxs)(t.p,{children:["The test engine renders the component, exposes the parts defined in the ",(0,i.jsx)(t.code,{children:"ScenePart"}),", and provides helper methods from the driver to interact with the component. Always call ",(0,i.jsx)(t.code,{children:"cleanUp()"})," after each test to unmount the component and release resources."]}),"\n",(0,i.jsx)(t.h2,{id:"7-build-a-form-driver",children:"7. Build a form driver"}),"\n",(0,i.jsx)(t.p,{children:"For larger forms it is convenient to create a driver that wraps the individual inputs. Below is a simplified driver for a login form."}),"\n",(0,i.jsx)(d.A,{language:"ts",children:a.A}),"\n",(0,i.jsx)(t.p,{children:"Use it in a test:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",metastring:'title="LoginForm.test.tsx"',children:"const parts = {\n  form: { locator: byDataTestId('login-form'), driver: LoginFormDriver },\n} satisfies ScenePart;\n\nconst engine = createTestEngineForComponent(<LoginForm />, parts);\nawait engine.parts.form.login({ username: 'admin', password: 'secret' });\n"})}),"\n",(0,i.jsxs)(t.p,{children:["With the ",(0,i.jsx)(t.code,{children:"login()"})," helper tests stay declarative and don't depend on the form's markup. If the implementation changes, update only ",(0,i.jsx)(t.code,{children:"LoginFormDriver"}),"."]}),"\n",(0,i.jsx)(t.h2,{id:"8-write-an-end-to-end-test",children:"8. Write an end-to-end test"}),"\n",(0,i.jsx)(t.p,{children:"Drivers work the same way in browser-based tests. The snippet below shows a Playwright test that reuses the drivers from the unit tests."}),"\n",(0,i.jsx)(d.A,{language:"ts",children:o}),"\n",(0,i.jsx)(t.p,{children:"Because the driver encapsulates how to fill in the form, the test logic is short and can run in any browser supported by Playwright."}),"\n",(0,i.jsx)(t.h2,{id:"next-steps",children:"Next steps"}),"\n",(0,i.jsxs)(t.p,{children:["Browse the example source code to see how scene parts, drivers and the test engine are set up. Then refer back to the ",(0,i.jsx)(t.a,{href:"/docs/setup",children:"Setup"})," and ",(0,i.jsx)(t.a,{href:"/docs/concepts",children:"Core Concepts"})," pages for more details on creating your own tests."]})]})}function u(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(m,{...e})}):m(e)}},8539:(e,t,n)=>{n.d(t,{A:()=>s});const s="import { TextFieldDriver, ButtonDriver } from '@atomic-testing/component-driver-mui-v5';\nimport {\n  ComponentDriver,\n  Interactor,\n  IComponentDriverOption,\n  IInputDriver,\n  PartLocator,\n  ScenePart,\n  byDataTestId,\n} from '@atomic-testing/core';\n\nconst parts = {\n  username: { locator: byDataTestId('username'), driver: TextFieldDriver },\n  password: { locator: byDataTestId('password'), driver: TextFieldDriver },\n  submit: { locator: byDataTestId('submit'), driver: ButtonDriver },\n} satisfies ScenePart;\n\nexport interface LoginCredential {\n  username: string;\n  password: string;\n}\n\nexport class LoginFormDriver extends ComponentDriver<typeof parts> implements IInputDriver<LoginCredential> {\n  constructor(locator: PartLocator, interactor: Interactor, option?: Partial<IComponentDriverOption>) {\n    super(locator, interactor, { ...option, parts });\n  }\n\n  async setValue(value: LoginCredential): Promise<boolean> {\n    await this.parts.username.setValue(value.username);\n    await this.parts.password.setValue(value.password);\n    return true;\n  }\n\n  async login(value: LoginCredential): Promise<void> {\n    await this.setValue(value);\n    await this.parts.submit.click();\n  }\n\n  get driverName(): string {\n    return 'LoginFormDriver';\n  }\n}\n"}}]);