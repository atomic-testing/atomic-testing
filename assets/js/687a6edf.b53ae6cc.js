"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2788],{36803:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>d,default:()=>u,frontMatter:()=>s,metadata:()=>r,toc:()=>h});const r=JSON.parse('{"id":"advanced-concepts/interactor","title":"Interactor","description":"An Interactor provides the low level operations used by component drivers to","source":"@site/docs/advanced-concepts/interactor.mdx","sourceDirName":"advanced-concepts","slug":"/advanced-concepts/interactor","permalink":"/docs/advanced-concepts/interactor","draft":false,"unlisted":false,"editUrl":"https://github.com/atomic-testing/atomic-testing/tree/main/docs/docs/docs/advanced-concepts/interactor.mdx","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"id":"interactor","sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Build Component Driver","permalink":"/docs/advanced-concepts/build-component-driver"},"next":{"title":"Architecture","permalink":"/docs/advanced-concepts/architecture"}}');var i=n(27968),o=n(14318);const c="import { ClickOption, PartLocator } from '@atomic-testing/core';\nimport { DOMInteractor } from '@atomic-testing/dom-core';\n\nexport class LoggingInteractor extends DOMInteractor {\n  async click(locator: PartLocator, option?: Partial<ClickOption>): Promise<void> {\n    console.log('clicking', await this.innerHTML(locator));\n    await super.click(locator, option);\n  }\n}\n";var a=n(32132);const s={id:"interactor",sidebar_position:2},d="Interactor",l={},h=[{value:"Available interactors",id:"available-interactors",level:2},{value:"Building an interactor",id:"building-an-interactor",level:2}];function p(e){const t={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"interactor",children:"Interactor"})}),"\n",(0,i.jsxs)(t.p,{children:["An ",(0,i.jsx)(t.strong,{children:"Interactor"})," provides the low level operations used by component drivers to\nmanipulate and query the UI. Drivers delegate every action such as clicking,\nentering text or reading an attribute to an interactor. By swapping the\ninteractor implementation, the same driver code works in different environments\nlike unit tests running in JSDOM or end\u2011to\u2011end tests with Playwright."]}),"\n",(0,i.jsx)(t.h2,{id:"available-interactors",children:"Available interactors"}),"\n",(0,i.jsx)(t.p,{children:"The project ships with several interactors:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"DOMInteractor"})," \u2013 runs against a DOM environment using\n",(0,i.jsx)(t.code,{children:"@testing-library"})," utilities. This is used for unit/integration tests."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"ReactInteractor"})," from ",(0,i.jsx)(t.strong,{children:"@atomic-testing/react-core"})," and the versioned\nReact adapters \u2013 extensions of ",(0,i.jsx)(t.code,{children:"DOMInteractor"})," that wrap interactions in\nReact's ",(0,i.jsx)(t.code,{children:"act()"})," helper so state updates are flushed correctly when testing\nReact 18 or later."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"PlaywrightInteractor"})," \u2013 drives a Playwright ",(0,i.jsx)(t.code,{children:"Page"})," object to execute tests\nin a real browser."]}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"building-an-interactor",children:"Building an interactor"}),"\n",(0,i.jsxs)(t.p,{children:["To build your own interactor, implement the ",(0,i.jsx)(t.code,{children:"Interactor"})," interface from the core\npackage. Most custom interactors extend an existing one and override only the\nbehaviour that differs. The snippet below logs every click before delegating to\n",(0,i.jsx)(t.code,{children:"DOMInteractor"}),":"]}),"\n",(0,i.jsx)(a.A,{language:"ts",children:c}),"\n",(0,i.jsxs)(t.p,{children:["When creating a test engine, pass an instance of your custom interactor. Refer to\nthe implementation of ",(0,i.jsx)(t.code,{children:"DOMInteractor"})," in\n",(0,i.jsx)(t.code,{children:"packages/dom-core/src/DOMInteractor.ts"})," for a complete example."]})]})}function u(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(p,{...e})}):p(e)}}}]);