"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([["2163"],{80714:function(e,n,t){t.r(n),t.d(n,{frontMatter:()=>l,default:()=>m,toc:()=>p,metadata:()=>r,assets:()=>u,contentTitle:()=>d});var r=JSON.parse('{"id":"concepts","title":"Core Concepts","description":"Before using Atomic Testing, familiarize yourself with the following key concepts:","source":"@site/docs/core-concepts.mdx","sourceDirName":".","slug":"/concepts","permalink":"/docs/concepts","draft":false,"unlisted":false,"editUrl":"https://github.com/atomic-testing/atomic-testing/tree/main/docs/docs/docs/core-concepts.mdx","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"id":"concepts","sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Introduction","permalink":"/docs/intro"},"next":{"title":"Setup","permalink":"/docs/setup"}}'),a=t(54381),o=t(91261),i=t(9715),s=t(42811),c=t(37331);let l={id:"concepts",sidebar_position:2},d="Core Concepts",u={},p=[{value:"Component Driver",id:"component-driver",level:2},{value:"Locator",id:"locator",level:2},{value:"ScenePart",id:"scenepart",level:2},{value:"Test Engine",id:"test-engine",level:2}];function h(e){let n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,o.a)(),...e.components},{Details:t}=n;return t||function(e,n){throw Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"core-concepts",children:"Core Concepts"})}),"\n",(0,a.jsx)(n.p,{children:"Before using Atomic Testing, familiarize yourself with the following key concepts:"}),"\n",(0,a.jsx)(n.h2,{id:"component-driver",children:"Component Driver"}),"\n",(0,a.jsx)(n.p,{children:"At the heart of Atomic Testing are component drivers. They define how to programmatically interact with UI components, such as clicking a button, selecting a value from a dropdown, or reading a row from a grid."}),"\n",(0,a.jsxs)(n.p,{children:["A growing number of component drivers are available for popular UI frameworks like ",(0,a.jsx)(n.a,{href:"https://mui.com",children:"Material UI"}),". Each component driver offers a set of methods for interacting with the component. When using TypeScript for writing tests, auto-completion can help discover available methods."]}),"\n",(0,a.jsx)(n.admonition,{type:"info",children:(0,a.jsxs)(n.p,{children:["Refer to the ",(0,a.jsx)(n.a,{href:"/docs/api-overview#component-drivers",children:"API Reference"})," for a list of available component drivers."]})}),"\n",(0,a.jsx)(n.h2,{id:"locator",children:"Locator"}),"\n",(0,a.jsxs)(n.p,{children:["Locators help find components on a page, using various ",(0,a.jsx)(n.a,{href:"/docs/api-overview#locator",children:"locator strategies"})," such as ",(0,a.jsx)(n.code,{children:"byDataTestId"})," and ",(0,a.jsx)(n.code,{children:"byRole"}),"."]}),"\n",(0,a.jsx)(n.admonition,{type:"tip",children:(0,a.jsxs)(n.p,{children:["The use of the data-testid attribute is recommended for locating components on a page. Refer to ",(0,a.jsx)(n.a,{href:"/docs/best-practices#4-use-data-testid-for-key-elements",children:"Best Practices"})," for more details. Use the ",(0,a.jsx)(n.code,{children:"byDataTestId(value)"})," API as the recommended approach for building locators."]})}),"\n",(0,a.jsx)(n.h2,{id:"scenepart",children:"ScenePart"}),"\n",(0,a.jsx)(n.p,{children:"A ScenePart is a map describing all components of interest (part) within a scene (a page or a rich UI component). Each entry in a ScenePart outlines the part name, the component locator, and the component driver."}),"\n",(0,a.jsxs)(t,{children:[(0,a.jsx)("summary",{children:"A sample ScenePart of a typical login screen"}),(0,a.jsx)(i.Z,{language:"ts",children:"import { HTMLAnchorDriver, HTMLElementDriver } from '@atomic-testing/component-driver-html';\nimport { ButtonDriver, TextFieldDriver } from '@atomic-testing/component-driver-mui-v5';\nimport { byDataTestId, ScenePart } from '@atomic-testing/core';\n\nconst loginScenePart: ScenePart = {\n  username: {\n    locator: byDataTestId('username'),\n    driver: TextFieldDriver,\n  },\n  password: {\n    locator: byDataTestId('password'),\n    driver: TextFieldDriver,\n  },\n  error: {\n    locator: byDataTestId('error-display'),\n    driver: HTMLElementDriver,\n  },\n  submit: {\n    locator: byDataTestId('submit'),\n    driver: ButtonDriver,\n  },\n  forgetPassword: {\n    locator: byDataTestId('forget-password'),\n    driver: HTMLAnchorDriver,\n  },\n} satisfies ScenePart;\n"})]}),"\n",(0,a.jsx)(n.h2,{id:"test-engine",children:"Test Engine"}),"\n",(0,a.jsx)(n.p,{children:"The Test Engine is where all the pieces come together. It is responsible for rendering a scene, locating all the components in the scene, and providing a set of methods to interact with the components."}),"\n",(0,a.jsxs)(n.p,{children:["Use ",(0,a.jsx)(n.code,{children:"createTestEngine"})," to create a Test Engine instance. The ",(0,a.jsx)(n.code,{children:"createTestEngine"})," function is specific to each rendering framework, such as React, Cypress, and Playwright."]}),"\n",(0,a.jsx)(n.p,{children:"The examples below demonstrate how to create a Test Engine for the loginScenePart described earlier."}),"\n","\n",(0,a.jsxs)(c.Z,{children:[(0,a.jsx)(s.Z,{value:"react",label:"React 18+",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:"import { createTestEngine } from '@atomic-testing/react-18';\n\nimport { Login } from './components/Login';\nimport { loginScenePart } from './loginScenePart';\n\nconst testEngine = createTestEngine(<Login />, loginScenePart);\n"})})}),(0,a.jsx)(s.Z,{value:"react-legacy",label:"React 17",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:"import { createLegacyTestEngine } from '@atomic-testing/react-legacy';\n\nimport { Login } from './components/Login';\nimport { loginScenePart } from './loginScenePart';\n\nconst testEngine = createLegacyTestEngine(<Login />, loginScenePart);\n"})})}),(0,a.jsx)(s.Z,{value:"vue",label:"Vue 3",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"import { createTestEngine } from '@atomic-testing/vue-3';\n\nimport Login from './components/Login.vue';\nimport { loginScenePart } from './loginScenePart';\n\nconst testEngine = createTestEngine(Login, loginScenePart);\n"})})}),(0,a.jsx)(s.Z,{value:"playwright",label:"Playwright",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:"import { createTestEngine } from '@atomic-testing/playwright';\n\nimport { loginScenePart } from './loginScenePart';\n\nawait page.goto('/login');\nconst testEngine = createTestEngine(page, loginScenePart);\n"})})}),(0,a.jsx)(s.Z,{value:"cypress",label:"Cypress",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:"import { createTestEngine } from '@atomic-testing/cypress';\n\nimport { loginScenePart } from './loginScenePart';\n\ncy.visit('/login');\nconst testEngine = createTestEngine(loginScenePart);\n"})})})]}),"\n",(0,a.jsx)(n.p,{children:"Once the test engine is created, it can be used to interact with the components in the scene."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"// Test code is agnostic to the rendering framework\n\nawait testEngine.parts.username.setValue('john@example.com');\nawait testEngine.parts.password.setValue('');\nawait testEngine.parts.submit.click();\n\nconst error = await testEngine.parts.error.getText();\nexpect(error).toEqual('Password is required'); // Jest assertion, but any assertion library can be used\n"})})]})}function m(e={}){let{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(h,{...e})}):h(e)}},42811:function(e,n,t){t.d(n,{Z:()=>o});var r=t(54381);t(73749);var a=t(90620);function o(e){let{children:n,hidden:t,className:o}=e;return(0,r.jsx)("div",{role:"tabpanel",className:(0,a.Z)("tabItem_M0og",o),hidden:t,children:n})}},37331:function(e,n,t){t.d(n,{Z:()=>x});var r=t(54381),a=t(73749),o=t(90620),i=t(57516),s=t(61456),c=t(30320),l=t(41740),d=t(95674),u=t(10591);function p(e){return a.Children.toArray(e).filter(e=>"\n"!==e).map(e=>{if(!e||(0,a.isValidElement)(e)&&function(e){let{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})?.filter(Boolean)??[]}function h(e){let{value:n,tabValues:t}=e;return t.some(e=>e.value===n)}var m=t(28306);function g(e){let{className:n,block:t,selectedValue:a,selectValue:s,tabValues:c}=e,l=[],{blockElementScrollPositionUntilNextRender:d}=(0,i.o5)(),u=e=>{let n=e.currentTarget,t=c[l.indexOf(n)].value;t!==a&&(d(n),s(t))},p=e=>{let n=null;switch(e.key){case"Enter":u(e);break;case"ArrowRight":{let t=l.indexOf(e.currentTarget)+1;n=l[t]??l[0];break}case"ArrowLeft":{let t=l.indexOf(e.currentTarget)-1;n=l[t]??l[l.length-1]}}n?.focus()};return(0,r.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":t},n),children:c.map(e=>{let{value:n,label:t,attributes:i}=e;return(0,r.jsx)("li",{role:"tab",tabIndex:a===n?0:-1,"aria-selected":a===n,ref:e=>{l.push(e)},onKeyDown:p,onClick:u,...i,className:(0,o.Z)("tabs__item","tabItem_cCOL",i?.className,{"tabs__item--active":a===n}),children:t??n},n)})})}function f(e){let{lazy:n,children:t,selectedValue:i}=e,s=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){let e=s.find(e=>e.props.value===i);return e?(0,a.cloneElement)(e,{className:(0,o.Z)("margin-top--md",e.props.className)}):null}return(0,r.jsx)("div",{className:"margin-top--md",children:s.map((e,n)=>(0,a.cloneElement)(e,{key:n,hidden:e.props.value!==i}))})}function v(e){let n=function(e){let{defaultValue:n,queryString:t=!1,groupId:r}=e,o=function(e){let{values:n,children:t}=e;return(0,a.useMemo)(()=>{let e=n??p(t).map(e=>{let{props:{value:n,label:t,attributes:r,default:a}}=e;return{value:n,label:t,attributes:r,default:a}}),r=(0,d.lx)(e,(e,n)=>e.value===n.value);if(r.length>0)throw Error(`Docusaurus error: Duplicate values "${r.map(e=>e.value).join(", ")}" found in <Tabs>. Every value needs to be unique.`);return e},[n,t])}(e),[i,m]=(0,a.useState)(()=>(function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!h({value:n,tabValues:t}))throw Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map(e=>e.value).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}let r=t.find(e=>e.default)??t[0];if(!r)throw Error("Unexpected error: 0 tabValues");return r.value})({defaultValue:n,tabValues:o})),[g,f]=function(e){let{queryString:n=!1,groupId:t}=e,r=(0,s.k6)(),o=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,l._X)(o),(0,a.useCallback)(e=>{if(!o)return;let n=new URLSearchParams(r.location.search);n.set(o,e),r.replace({...r.location,search:n.toString()})},[o,r])]}({queryString:t,groupId:r}),[v,x]=function(e){let{groupId:n}=e,t=n?`docusaurus.tab.${n}`:null,[r,o]=(0,u.Nk)(t);return[r,(0,a.useCallback)(e=>{t&&o.set(e)},[t,o])]}({groupId:r}),b=(()=>{let e=g??v;return h({value:e,tabValues:o})?e:null})();return(0,c.Z)(()=>{b&&m(b)},[b]),{selectedValue:i,selectValue:(0,a.useCallback)(e=>{if(!h({value:e,tabValues:o}))throw Error(`Can't select invalid tab value=${e}`);m(e),f(e),x(e)},[f,x,o]),tabValues:o}}(e);return(0,r.jsxs)("div",{className:(0,o.Z)("tabs-container","tabList_yaTQ"),children:[(0,r.jsx)(g,{...n,...e}),(0,r.jsx)(f,{...n,...e})]})}function x(e){let n=(0,m.Z)();return(0,r.jsx)(v,{...e,children:p(e.children)},String(n))}}}]);