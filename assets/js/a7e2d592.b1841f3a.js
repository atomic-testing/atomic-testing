"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[523],{4441:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>D,contentTitle:()=>P,default:()=>L,frontMatter:()=>I,metadata:()=>k,toc:()=>V});var r=n(5250),a=n(1118),o=n(79),s=n(3230),i=n(8483),c=n(7911),l=n(2015),u=n(5043),d=n(3422),p=n(5713);function m(e){return o.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,o.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function h(e){const{values:t,children:n}=e;return(0,o.useMemo)((()=>{const e=t??function(e){return m(e).map((e=>{let{props:{value:t,label:n,attributes:r,default:a}}=e;return{value:t,label:n,attributes:r,default:a}}))}(n);return function(e){const t=(0,d.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function g(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function f(e){let{queryString:t=!1,groupId:n}=e;const r=(0,c.k6)(),a=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,u._X)(a),(0,o.useCallback)((e=>{if(!a)return;const t=new URLSearchParams(r.location.search);t.set(a,e),r.replace({...r.location,search:t.toString()})}),[a,r])]}function b(e){const{defaultValue:t,queryString:n=!1,groupId:r}=e,a=h(e),[s,i]=(0,o.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!g({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const r=n.find((e=>e.default))??n[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:t,tabValues:a}))),[c,u]=f({queryString:n,groupId:r}),[d,m]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[r,a]=(0,p.Nk)(n);return[r,(0,o.useCallback)((e=>{n&&a.set(e)}),[n,a])]}({groupId:r}),b=(()=>{const e=c??d;return g({value:e,tabValues:a})?e:null})();(0,l.Z)((()=>{b&&i(b)}),[b]);return{selectedValue:s,selectValue:(0,o.useCallback)((e=>{if(!g({value:e,tabValues:a}))throw new Error(`Can't select invalid tab value=${e}`);i(e),u(e),m(e)}),[u,m,a]),tabValues:a}}var v=n(1889);const x={tabList:"tabList_mxko",tabItem:"tabItem_bobj"};function y(e){let{className:t,block:n,selectedValue:a,selectValue:o,tabValues:c}=e;const l=[],{blockElementScrollPositionUntilNextRender:u}=(0,i.o5)(),d=e=>{const t=e.currentTarget,n=l.indexOf(t),r=c[n].value;r!==a&&(u(t),o(r))},p=e=>{let t=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const n=l.indexOf(e.currentTarget)+1;t=l[n]??l[0];break}case"ArrowLeft":{const n=l.indexOf(e.currentTarget)-1;t=l[n]??l[l.length-1];break}}t?.focus()};return(0,r.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.Z)("tabs",{"tabs--block":n},t),children:c.map((e=>{let{value:t,label:n,attributes:o}=e;return(0,r.jsx)("li",{role:"tab",tabIndex:a===t?0:-1,"aria-selected":a===t,ref:e=>l.push(e),onKeyDown:p,onClick:d,...o,className:(0,s.Z)("tabs__item",x.tabItem,o?.className,{"tabs__item--active":a===t}),children:n??t},t)}))})}function j(e){let{lazy:t,children:n,selectedValue:a}=e;const s=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=s.find((e=>e.props.value===a));return e?(0,o.cloneElement)(e,{className:"margin-top--md"}):null}return(0,r.jsx)("div",{className:"margin-top--md",children:s.map(((e,t)=>(0,o.cloneElement)(e,{key:t,hidden:e.props.value!==a})))})}function w(e){const t=b(e);return(0,r.jsxs)("div",{className:(0,s.Z)("tabs-container",x.tabList),children:[(0,r.jsx)(y,{...e,...t}),(0,r.jsx)(j,{...e,...t})]})}function T(e){const t=(0,v.Z)();return(0,r.jsx)(w,{...e,children:m(e.children)},String(t))}const E={tabItem:"tabItem_cWbG"};function S(e){let{children:t,hidden:n,className:a}=e;return(0,r.jsx)("div",{role:"tabpanel",className:(0,s.Z)(E.tabItem,a),hidden:n,children:t})}const I={id:"concepts",sidebar_position:2},P="Core Concepts",k={id:"concepts",title:"Core Concepts",description:"Before using Atomic Testing, familiarize yourself with the following key concepts:",source:"@site/docs/core-concepts.mdx",sourceDirName:".",slug:"/concepts",permalink:"/docs/concepts",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/core-concepts.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{id:"concepts",sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Introduction",permalink:"/docs/intro"},next:{title:"Example",permalink:"/docs/example"}},D={},V=[{value:"Component Driver",id:"component-driver",level:2},{value:"Locator",id:"locator",level:2},{value:"ScenePart",id:"scenepart",level:2},{value:"Test Engine",id:"test-engine",level:2}];function C(e){const t={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,a.a)(),...e.components},{Details:n}=t;return n||function(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h1,{id:"core-concepts",children:"Core Concepts"}),"\n",(0,r.jsx)(t.p,{children:"Before using Atomic Testing, familiarize yourself with the following key concepts:"}),"\n",(0,r.jsx)(t.h2,{id:"component-driver",children:"Component Driver"}),"\n",(0,r.jsx)(t.p,{children:"At the heart of Atomic Testing are component drivers. They define how to programmatically interact with UI components, such as clicking a button, selecting a value from a dropdown, or reading a row from a grid."}),"\n",(0,r.jsxs)(t.p,{children:["A growing number of component drivers are available for popular UI frameworks like ",(0,r.jsx)(t.a,{href:"https://mui.com",children:"Material UI"}),". Each component driver offers a set of methods for interacting with the component. When using TypeScript for writing tests, auto-completion can help discover available methods."]}),"\n",(0,r.jsx)(t.admonition,{type:"info",children:(0,r.jsxs)(t.p,{children:["Refer to the ",(0,r.jsx)(t.a,{href:"/docs/api#component-drivers",children:"API Reference"})," for a list of available component drivers."]})}),"\n",(0,r.jsx)(t.h2,{id:"locator",children:"Locator"}),"\n",(0,r.jsxs)(t.p,{children:["Locators help find components on a page, using various ",(0,r.jsx)(t.a,{href:"/docs/api#locator",children:"locator strategies"})," such as ",(0,r.jsx)(t.code,{children:"byDataTestId"})," and ",(0,r.jsx)(t.code,{children:"byRole"}),"."]}),"\n",(0,r.jsx)(t.admonition,{type:"tip",children:(0,r.jsxs)(t.p,{children:["The use of the data-testid attribute is recommended for locating components on a page. Refer to ",(0,r.jsx)(t.a,{href:"/docs/best-practices#data-testid",children:"Best Practices"})," for more details. Use the ",(0,r.jsx)(t.code,{children:"byDataTestId(value)"})," API as the recommended approach for building locators."]})}),"\n",(0,r.jsx)(t.h2,{id:"scenepart",children:"ScenePart"}),"\n",(0,r.jsx)(t.p,{children:"A ScenePart is a map describing all components of interest (part) within a scene (a page or a rich UI component). Each entry in a ScenePart outlines the part name, the component locator, and the component driver."}),"\n",(0,r.jsxs)(n,{children:[(0,r.jsx)("summary",{children:"A sample ScenePart of a typical login screen"}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ts",children:"import { ScenePart } from '@atomic-testing/core';\nimport { HTMLAnchorDriver, HTMLElementDriver } from '@atomic-testing/component-driver-html';\nimport { ButtonDriver, TextFieldDriver } from '@atomic-testing/component-driver-mui-v5';\n\nconst loginScenePart: ScenePart = {\n  username: {\n    locator: byDataTestId('username'),\n    driver: TextFieldDriver,\n  },\n  password: {\n    locator: byDataTestId('password'),\n    driver: TextFieldDriver,\n  },\n  error: {\n    locator: byDataTestId('error-display'),\n    driver: HTMLElementDriver,\n  },\n  submit: {\n    locator: byDataTestId('submit'),\n    driver: ButtonDriver,\n  },\n  forgetPassword: {\n    locator: byDataTestId('forget-password'),\n    driver: HTMLAnchorDriver,\n  },\n} satisfies ScenePart;\n"})})]}),"\n",(0,r.jsx)(t.h2,{id:"test-engine",children:"Test Engine"}),"\n",(0,r.jsx)(t.p,{children:"The Test Engine is where all the pieces come together. It is responsible for rendering a scene, locating all the components in the scene, and providing a set of methods to interact with the components."}),"\n",(0,r.jsxs)(t.p,{children:["Use ",(0,r.jsx)(t.code,{children:"createTestEngine"})," to create a Test Engine instance. The ",(0,r.jsx)(t.code,{children:"createTestEngine"})," function is specific to each rendering framework, such as React, Cypress, and Playwright."]}),"\n",(0,r.jsx)(t.p,{children:"The examples below demonstrate how to create a Test Engine for the loginScenePart described earlier."}),"\n","\n","\n",(0,r.jsxs)(T,{children:[(0,r.jsx)(S,{value:"react",label:"React 18+",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-tsx",children:"import { createTestEngine } from '@atomic-testing/react';\nimport { loginScenePart } from './loginScenePart';\nimport { Login } from './components/Login';\n\nconst testEngine = createTestEngine(<Login />, loginScenePart);\n"})})}),(0,r.jsx)(S,{value:"react-legacy",label:"React 17",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-tsx",children:"import { createLegacyTestEngine } from '@atomic-testing/react/dist/createLegacyTestEngine';\nimport { loginScenePart } from './loginScenePart';\nimport { Login } from './components/Login';\n\nconst testEngine = createLegacyTestEngine(<Login />, loginScenePart);\n"})})}),(0,r.jsx)(S,{value:"playwright",label:"Playwright",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-tsx",children:"import { createTestEngine } from '@atomic-testing/playwright';\nimport { loginScenePart } from './loginScenePart';\n\nawait page.goto('/login');\nconst testEngine = createTestEngine(page, loginScenePart);\n"})})}),(0,r.jsx)(S,{value:"cypress",label:"Cypress",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-tsx",children:"import { createTestEngine } from '@atomic-testing/cypress';\nimport { loginScenePart } from './loginScenePart';\n\ncy.visit('/login');\nconst testEngine = createTestEngine(loginScenePart);\n"})})})]}),"\n",(0,r.jsx)(t.p,{children:"Once the test engine is created, it can be used to interact with the components in the scene."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ts",children:"// Test code is agnostic to the rendering framework\n\nawait testEngine.parts.username.setValue('john@example.com');\nawait testEngine.parts.password.setValue('');\nawait testEngine.parts.submit.click();\n\nconst error = await testEngine.parts.error.getText();\nexpect(error).toEqual('Password is required'); // Jest assertion, but any assertion library can be used\n"})})]})}function L(e={}){const{wrapper:t}={...(0,a.a)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(C,{...e})}):C(e)}},1118:(e,t,n)=>{n.d(t,{Z:()=>i,a:()=>s});var r=n(79);const a={},o=r.createContext(a);function s(e){const t=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),r.createElement(o.Provider,{value:t},e.children)}}}]);