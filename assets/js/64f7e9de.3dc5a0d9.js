"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4459],{1476:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>d,default:()=>u,frontMatter:()=>c,metadata:()=>t,toc:()=>p});const t=JSON.parse('{"id":"advanced-concepts/build-component-driver","title":"Build Component Driver","description":"Component drivers encapsulate the logic for interacting with a UI component. While many drivers are provided out of the box, you can build your own for custom widgets.","source":"@site/docs/advanced-concepts/build-component-driver.mdx","sourceDirName":"advanced-concepts","slug":"/advanced-concepts/build-component-driver","permalink":"/docs/advanced-concepts/build-component-driver","draft":false,"unlisted":false,"editUrl":"https://github.com/atomic-testing/atomic-testing/tree/main/docs/docs/docs/advanced-concepts/build-component-driver.mdx","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"id":"build-component-driver","sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Advanced Guides","permalink":"/docs/category/advanced-guides"},"next":{"title":"Interactor","permalink":"/docs/advanced-concepts/interactor"}}');var i=r(27968),o=r(14318),s=r(48539),a=r(77361);const c={id:"build-component-driver",sidebar_position:1},d="Build Component Driver",l={},p=[{value:"Basic structure",id:"basic-structure",level:2},{value:"Why use drivers?",id:"why-use-drivers",level:2},{value:"Example: composing a login form driver",id:"example-composing-a-login-form-driver",level:2},{value:"Environment agnostic",id:"environment-agnostic",level:3}];function m(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"build-component-driver",children:"Build Component Driver"})}),"\n",(0,i.jsx)(n.p,{children:"Component drivers encapsulate the logic for interacting with a UI component. While many drivers are provided out of the box, you can build your own for custom widgets."}),"\n",(0,i.jsx)(n.h2,{id:"basic-structure",children:"Basic structure"}),"\n",(0,i.jsxs)(n.p,{children:["A driver extends ",(0,i.jsx)(n.code,{children:"ComponentDriver"})," and implements any interfaces that describe its capabilities. The ",(0,i.jsx)(n.code,{children:"constructor"})," receives a locator, an interactor and optional configuration."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",metastring:'title="SimpleButtonDriver.ts"',children:"import { ComponentDriver, IClickableDriver } from '@atomic-testing/core';\n\nexport class SimpleButtonDriver extends ComponentDriver implements IClickableDriver {\n  click(): Promise<void> {\n    return this.interactor.click(this.locator);\n  }\n\n  get driverName(): string {\n    return 'SimpleButtonDriver';\n  }\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"why-use-drivers",children:"Why use drivers?"}),"\n",(0,i.jsxs)(n.p,{children:["Drivers abstract away the DOM details of complex components. Instead of manipulating HTML in tests, you interact with high level methods (",(0,i.jsx)(n.code,{children:"next()"}),", ",(0,i.jsx)(n.code,{children:"setValue()"}),", etc.). Drivers can expose child parts so you can compose them into larger units and reuse them across tests."]}),"\n",(0,i.jsxs)(n.p,{children:["For example, the signup form in the example project is implemented with a ",(0,i.jsx)(n.code,{children:"CredentialFormDriver"})," that wraps four MUI text fields and a navigation component. Tests only call ",(0,i.jsx)(n.code,{children:"setValue()"})," and ",(0,i.jsx)(n.code,{children:"next()"})," on this driver, keeping the assertions focused on behavior rather than DOM markup."]}),"\n",(0,i.jsx)(n.p,{children:"By composing multiple drivers you can model entire workflows with minimal test code."}),"\n",(0,i.jsx)(n.h2,{id:"example-composing-a-login-form-driver",children:"Example: composing a login form driver"}),"\n",(0,i.jsxs)(n.p,{children:["The snippet below defines a ",(0,i.jsx)(n.code,{children:"LoginFormDriver"})," that combines two ",(0,i.jsx)(n.code,{children:"TextFieldDriver"}),"s and a ",(0,i.jsx)(n.code,{children:"ButtonDriver"}),". It exposes a high level ",(0,i.jsx)(n.code,{children:"login()"})," helper so tests no longer deal with individual inputs."]}),"\n",(0,i.jsx)(a.A,{language:"ts",children:s.A}),"\n",(0,i.jsx)(n.p,{children:"By wrapping the lower level drivers, the login test becomes very small:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"await testEngine.parts.form.login({ username: 'alice', password: 's3cr3t' });\n"})}),"\n",(0,i.jsx)(n.h3,{id:"environment-agnostic",children:"Environment agnostic"}),"\n",(0,i.jsxs)(n.p,{children:["Drivers rely on the ",(0,i.jsx)(n.code,{children:"Interactor"})," abstraction, so the same driver can run in unit tests with JSDOM or in browser tests using Playwright or Cypress. Tests remain identical across environments."]}),"\n",(0,i.jsx)(n.admonition,{title:"Pro tip",type:"tip",children:(0,i.jsx)(n.p,{children:"Encapsulating interactions in drivers keeps tests declarative. When the login flow changes, update the driver once and reuse it for both unit and end\u2011to\u2011end scenarios."})})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(m,{...e})}):m(e)}},48539:(e,n,r)=>{r.d(n,{A:()=>t});const t="import { TextFieldDriver, ButtonDriver } from '@atomic-testing/component-driver-mui-v5';\nimport {\n  ComponentDriver,\n  Interactor,\n  IComponentDriverOption,\n  IInputDriver,\n  PartLocator,\n  ScenePart,\n  byDataTestId,\n} from '@atomic-testing/core';\n\nconst parts = {\n  username: { locator: byDataTestId('username'), driver: TextFieldDriver },\n  password: { locator: byDataTestId('password'), driver: TextFieldDriver },\n  submit: { locator: byDataTestId('submit'), driver: ButtonDriver },\n} satisfies ScenePart;\n\nexport interface LoginCredential {\n  username: string;\n  password: string;\n}\n\nexport class LoginFormDriver extends ComponentDriver<typeof parts> implements IInputDriver<LoginCredential> {\n  constructor(locator: PartLocator, interactor: Interactor, option?: Partial<IComponentDriverOption>) {\n    super(locator, interactor, { ...option, parts });\n  }\n\n  async setValue(value: LoginCredential): Promise<boolean> {\n    await this.parts.username.setValue(value.username);\n    await this.parts.password.setValue(value.password);\n    return true;\n  }\n\n  async login(value: LoginCredential): Promise<void> {\n    await this.setValue(value);\n    await this.parts.submit.click();\n  }\n\n  get driverName(): string {\n    return 'LoginFormDriver';\n  }\n}\n"}}]);