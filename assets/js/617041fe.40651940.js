"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2199],{14318:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>r});var s=n(64700);const i={},o=s.createContext(i);function a(e){const t=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(o.Provider,{value:t},e.children)}},74717:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>p,frontMatter:()=>a,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"setup","title":"Setup","description":"Steps to create a test","source":"@site/docs/setup.mdx","sourceDirName":".","slug":"/setup","permalink":"/docs/setup","draft":false,"unlisted":false,"editUrl":"https://github.com/atomic-testing/atomic-testing/tree/main/docs/docs/docs/setup.mdx","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"id":"setup","sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Core Concepts","permalink":"/docs/concepts"},"next":{"title":"API overview","permalink":"/docs/api-overview"}}');var i=n(27968),o=n(14318);const a={id:"setup",sidebar_position:3},r="Setup",c={},l=[{value:"Steps to create a test",id:"steps-to-create-a-test",level:2},{value:"1. Annotate Key Elements with <code>data-testid</code>",id:"1-annotate-key-elements-with-data-testid",level:3},{value:"Example",id:"example",level:4},{value:"2. Define Scene Parts",id:"2-define-scene-parts",level:3},{value:"3. Render the Component with TestEngine",id:"3-render-the-component-with-testengine",level:3},{value:"4. Writing Your Tests",id:"4-writing-your-tests",level:3},{value:"Demo",id:"demo",level:2}];function d(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"setup",children:"Setup"})}),"\n",(0,i.jsx)(t.h2,{id:"steps-to-create-a-test",children:"Steps to create a test"}),"\n",(0,i.jsxs)(t.h3,{id:"1-annotate-key-elements-with-data-testid",children:["1. Annotate Key Elements with ",(0,i.jsx)(t.code,{children:"data-testid"})]}),"\n",(0,i.jsxs)(t.p,{children:["Mark the key components with a ",(0,i.jsx)(t.code,{children:"data-testid"})," attribute. These elements are the ones you will probe for values, states, or perform interactions like clicks or selections."]}),"\n",(0,i.jsx)(t.h4,{id:"example",children:"Example"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-tsx",children:'// Use data-testid on the span for easily retrieving the displayed name.\n<Typography variant="h1">\n  Hello <span data-testid="person-name">{name}</span>\n</Typography>\n\n// Annotate the AutoComplete component to set its selection.\n<AutoComplete data-testid="favorite-color-value" choices={choices} />\n\n// A MUI button can be probed for its state (e.g., "disabled") or clicked.\n<MuiButton data-testid="submit" disabled={disabled}>\n  Submit\n</MuiButton>\n'})}),"\n",(0,i.jsx)(t.hr,{}),"\n",(0,i.jsx)(t.h3,{id:"2-define-scene-parts",children:"2. Define Scene Parts"}),"\n",(0,i.jsxs)(t.p,{children:["A ",(0,i.jsx)(t.strong,{children:"ScenePart"})," describes how to locate a key component and which driver to use for interacting with it. For instance, the example above can be mapped as follows:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",children:"import { HTMLComponentDriver } from '@atomic-testing/component-driver-html';\nimport { ButtonDriver, AutoCompleteDriver } from '@atomic-testing/component-driver-mui-v6';\nimport { byDataTestId, ScenePart } from '@atomic-testing/core';\n\nconst parts = {\n  personDisplay: {\n    locator: byDataTestId('person-name'),\n    driver: HTMLComponentDriver,\n  },\n  favoriteColorInput: {\n    locator: byDataTestId('favorite-color-value'),\n    driver: AutoCompleteDriver,\n  },\n  submitButton: {\n    locator: byDataTestId('submit'),\n    driver: ButtonDriver,\n  },\n} satisfies ScenePart; // Using \"satisfies ScenePart\" improves TypeScript type-checking.\n"})}),"\n",(0,i.jsx)(t.hr,{}),"\n",(0,i.jsx)(t.h3,{id:"3-render-the-component-with-testengine",children:"3. Render the Component with TestEngine"}),"\n",(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.strong,{children:"TestEngine"})," is your entry point for interacting with a component. Use the ",(0,i.jsx)(t.code,{children:"createTestEngineForComponent()"})," method to instantiate the engine. Assign it in ",(0,i.jsx)(t.code,{children:"beforeEach"})," and clean it up in ",(0,i.jsx)(t.code,{children:"afterEach"})," to prevent cross-test contamination."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",children:"import { TestEngine } from '@atomic-testing/core';\nimport { createTestEngineForComponent } from '@/shared/utils/ui-test-util';\n\nlet testEngine: TestEngine<typeof parts>; // Type declaration ensures precise type checking.\n\nbeforeEach(() => {\n  testEngine = createTestEngineForComponent(<MyComponent prop1={value1} />, parts);\n});\n\nafterEach(async () => {\n  await testEngine.cleanUp();\n});\n"})}),"\n",(0,i.jsxs)(t.p,{children:["After instantiation, you can access your declared parts through the engine\u2019s ",(0,i.jsx)(t.code,{children:"parts"})," property:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",children:"await testEngine.parts.personDisplay.text(); // Retrieves plain text from the personDisplay part.\n\nawait testEngine.parts.favoriteColorInput.setValue('Black');\n// Sets the auto-complete component to \"Black\" using the AutoCompleteDriver's method.\n\nawait testEngine.parts.submitButton.isDisabled(); // Checks if the submit button is disabled.\n\nawait testEngine.parts.submitButton.click(); // Simulates a click on the submit button.\n"})}),"\n",(0,i.jsx)(t.hr,{}),"\n",(0,i.jsx)(t.h3,{id:"4-writing-your-tests",children:"4. Writing Your Tests"}),"\n",(0,i.jsx)(t.p,{children:"Write tests as you normally would, keeping in mind that most UI interactions are asynchronous. Here\u2019s an example of how a test flow might look:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",children:"it(`should display the person's name as \"John Doe\"`, async () => {\n  expect(await testEngine.parts.personDisplay.text()).toEqual('John Doe');\n});\n\nit(`should enable the submit button once a color is chosen`, async () => {\n  await testEngine.parts.favoriteColorInput.setValue('Black');\n  expect(await testEngine.parts.submitButton.isDisabled()).toEqual(false);\n});\n"})}),"\n",(0,i.jsx)(t.h2,{id:"demo",children:"Demo"}),"\n",(0,i.jsx)(t.p,{children:"The following demo illustrates the complete setup of a login form using Atomic Testing. It includes the test setup, component rendering, and interaction with the UI elements."}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"https://codesandbox.io/p/sandbox/github/atomic-testing/atomic-testing/tree/main/examples/example-mui-signup-form",children:"Sample Login Form on Codesandbox"})}),"\n",(0,i.jsxs)(t.li,{children:["Follow the ",(0,i.jsx)(t.a,{href:"/docs/tutorial",children:"Step-by-Step Tutorial"})," which walks you through the sample form and how tests are written"]}),"\n"]})]})}function p(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);