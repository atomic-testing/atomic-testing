"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[255],{9552:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>c,contentTitle:()=>n,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"best-practices","title":"Best Practices","description":"1. Start with a Storybook Scenario","source":"@site/docs/best-practices.mdx","sourceDirName":".","slug":"/best-practices","permalink":"/docs/best-practices","draft":false,"unlisted":false,"editUrl":"https://github.com/atomic-testing/atomic-testing/tree/main/docs/docs/docs/best-practices.mdx","tags":[],"version":"current","sidebarPosition":6,"frontMatter":{"id":"best-practices","sidebar_position":6},"sidebar":"tutorialSidebar","previous":{"title":"Step-by-Step Tutorial","permalink":"/docs/tutorial"},"next":{"title":"Cheat Sheets & Troubleshooting","permalink":"/docs/cheat-sheets"}}');var a=s(7968),r=s(9880);const o={id:"best-practices",sidebar_position:6},n="Best Practices",c={},d=[{value:"1. Start with a Storybook Scenario",id:"1-start-with-a-storybook-scenario",level:3},{value:"2. Test Values, Not HTML Markup",id:"2-test-values-not-html-markup",level:3},{value:"3. Avoid Direct React Testing Library Calls",id:"3-avoid-direct-react-testing-library-calls",level:3},{value:"4. Use <code>data-testid</code> for Key Elements",id:"4-use-data-testid-for-key-elements",level:3}];function l(e){const t={code:"code",h1:"h1",h3:"h3",header:"header",p:"p",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"best-practices",children:"Best Practices"})}),"\n",(0,a.jsx)(t.h3,{id:"1-start-with-a-storybook-scenario",children:"1. Start with a Storybook Scenario"}),"\n",(0,a.jsx)(t.p,{children:"Create a Storybook story that mirrors your test scenario. This helps visualize the component state and behavior, and can serve as a basis for further testing integrations as Storybook\u2019s testing capabilities evolve."}),"\n",(0,a.jsx)(t.h3,{id:"2-test-values-not-html-markup",children:"2. Test Values, Not HTML Markup"}),"\n",(0,a.jsx)(t.p,{children:"Focus on testing the plain values or states rather than the underlying HTML or formatting details."}),"\n",(0,a.jsx)(t.h3,{id:"3-avoid-direct-react-testing-library-calls",children:"3. Avoid Direct React Testing Library Calls"}),"\n",(0,a.jsx)(t.p,{children:"Although Atomic Testing Library leverages React Testing Library (RTL), direct RTL calls should be avoided. This maintains the abstraction and predictability of your tests, similar to avoiding direct DOM manipulation in React components."}),"\n",(0,a.jsxs)(t.h3,{id:"4-use-data-testid-for-key-elements",children:["4. Use ",(0,a.jsx)(t.code,{children:"data-testid"})," for Key Elements"]}),"\n",(0,a.jsxs)(t.p,{children:["Use ",(0,a.jsx)(t.code,{children:"data-testid"})," attributes to mark key components. This allows you to easily locate and interact with these elements in your tests."]})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},9880:(e,t,s)=>{s.d(t,{R:()=>o,x:()=>n});var i=s(4700);const a={},r=i.createContext(a);function o(e){const t=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function n(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),i.createElement(r.Provider,{value:t},e.children)}}}]);