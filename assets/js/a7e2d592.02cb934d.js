"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[62],{20938:(e,t,n)=>{n.d(t,{A:()=>s});n(64700);var r=n(23372);const a={tabItem:"tabItem_ELpC"};var o=n(27968);function s({children:e,hidden:t,className:n}){return(0,o.jsx)("div",{role:"tabpanel",className:(0,r.A)(a.tabItem,n),hidden:t,children:e})}},22132:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>u,default:()=>g,frontMatter:()=>d,metadata:()=>r,toc:()=>h});const r=JSON.parse('{"id":"concepts","title":"Core Concepts","description":"Before using Atomic Testing, familiarize yourself with the following key concepts:","source":"@site/docs/core-concepts.mdx","sourceDirName":".","slug":"/concepts","permalink":"/docs/concepts","draft":false,"unlisted":false,"editUrl":"https://github.com/atomic-testing/atomic-testing/tree/main/docs/docs/docs/core-concepts.mdx","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"id":"concepts","sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Introduction","permalink":"/docs/intro"},"next":{"title":"Setup","permalink":"/docs/setup"}}');var a=n(27968),o=n(14318);const s="import { HTMLAnchorDriver, HTMLElementDriver } from '@atomic-testing/component-driver-html';\nimport { ButtonDriver, TextFieldDriver } from '@atomic-testing/component-driver-mui-v5';\nimport { byDataTestId, ScenePart } from '@atomic-testing/core';\n\nconst loginScenePart: ScenePart = {\n  username: {\n    locator: byDataTestId('username'),\n    driver: TextFieldDriver,\n  },\n  password: {\n    locator: byDataTestId('password'),\n    driver: TextFieldDriver,\n  },\n  error: {\n    locator: byDataTestId('error-display'),\n    driver: HTMLElementDriver,\n  },\n  submit: {\n    locator: byDataTestId('submit'),\n    driver: ButtonDriver,\n  },\n  forgetPassword: {\n    locator: byDataTestId('forget-password'),\n    driver: HTMLAnchorDriver,\n  },\n} satisfies ScenePart;\n";var i=n(77361),c=n(20938),l=n(57608);const d={id:"concepts",sidebar_position:2},u="Core Concepts",p={},h=[{value:"Component Driver",id:"component-driver",level:2},{value:"Locator",id:"locator",level:2},{value:"ScenePart",id:"scenepart",level:2},{value:"Test Engine",id:"test-engine",level:2}];function m(e){const t={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,o.R)(),...e.components},{Details:n}=t;return n||function(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"core-concepts",children:"Core Concepts"})}),"\n",(0,a.jsx)(t.p,{children:"Before using Atomic Testing, familiarize yourself with the following key concepts:"}),"\n",(0,a.jsx)(t.h2,{id:"component-driver",children:"Component Driver"}),"\n",(0,a.jsx)(t.p,{children:"At the heart of Atomic Testing are component drivers. They define how to programmatically interact with UI components, such as clicking a button, selecting a value from a dropdown, or reading a row from a grid."}),"\n",(0,a.jsxs)(t.p,{children:["A growing number of component drivers are available for popular UI frameworks like ",(0,a.jsx)(t.a,{href:"https://mui.com",children:"Material UI"}),". Each component driver offers a set of methods for interacting with the component. When using TypeScript for writing tests, auto-completion can help discover available methods."]}),"\n",(0,a.jsx)(t.admonition,{type:"info",children:(0,a.jsxs)(t.p,{children:["Refer to the ",(0,a.jsx)(t.a,{href:"/docs/api-overview#component-drivers",children:"API Reference"})," for a list of available component drivers."]})}),"\n",(0,a.jsx)(t.h2,{id:"locator",children:"Locator"}),"\n",(0,a.jsxs)(t.p,{children:["Locators help find components on a page, using various ",(0,a.jsx)(t.a,{href:"/docs/api-overview#locator",children:"locator strategies"})," such as ",(0,a.jsx)(t.code,{children:"byDataTestId"})," and ",(0,a.jsx)(t.code,{children:"byRole"}),"."]}),"\n",(0,a.jsx)(t.admonition,{type:"tip",children:(0,a.jsxs)(t.p,{children:["The use of the data-testid attribute is recommended for locating components on a page. Refer to ",(0,a.jsx)(t.a,{href:"/docs/best-practices#4-use-data-testid-for-key-elements",children:"Best Practices"})," for more details. Use the ",(0,a.jsx)(t.code,{children:"byDataTestId(value)"})," API as the recommended approach for building locators."]})}),"\n",(0,a.jsx)(t.h2,{id:"scenepart",children:"ScenePart"}),"\n",(0,a.jsx)(t.p,{children:"A ScenePart is a map describing all components of interest (part) within a scene (a page or a rich UI component). Each entry in a ScenePart outlines the part name, the component locator, and the component driver."}),"\n",(0,a.jsxs)(n,{children:[(0,a.jsx)("summary",{children:"A sample ScenePart of a typical login screen"}),(0,a.jsx)(i.A,{language:"ts",children:s})]}),"\n",(0,a.jsx)(t.h2,{id:"test-engine",children:"Test Engine"}),"\n",(0,a.jsx)(t.p,{children:"The Test Engine is where all the pieces come together. It is responsible for rendering a scene, locating all the components in the scene, and providing a set of methods to interact with the components."}),"\n",(0,a.jsxs)(t.p,{children:["Use ",(0,a.jsx)(t.code,{children:"createTestEngine"})," to create a Test Engine instance. The ",(0,a.jsx)(t.code,{children:"createTestEngine"})," function is specific to each rendering framework, such as React, Cypress, and Playwright."]}),"\n",(0,a.jsx)(t.p,{children:"The examples below demonstrate how to create a Test Engine for the loginScenePart described earlier."}),"\n","\n",(0,a.jsxs)(l.A,{children:[(0,a.jsx)(c.A,{value:"react",label:"React 18+",children:(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-tsx",children:"import { createTestEngine } from '@atomic-testing/react';\n\nimport { Login } from './components/Login';\nimport { loginScenePart } from './loginScenePart';\n\nconst testEngine = createTestEngine(<Login />, loginScenePart);\n"})})}),(0,a.jsx)(c.A,{value:"react-legacy",label:"React 17",children:(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-tsx",children:"import { createLegacyTestEngine } from '@atomic-testing/react/dist/createLegacyTestEngine';\n\nimport { Login } from './components/Login';\nimport { loginScenePart } from './loginScenePart';\n\nconst testEngine = createLegacyTestEngine(<Login />, loginScenePart);\n"})})}),(0,a.jsx)(c.A,{value:"playwright",label:"Playwright",children:(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-tsx",children:"import { createTestEngine } from '@atomic-testing/playwright';\n\nimport { loginScenePart } from './loginScenePart';\n\nawait page.goto('/login');\nconst testEngine = createTestEngine(page, loginScenePart);\n"})})}),(0,a.jsx)(c.A,{value:"cypress",label:"Cypress",children:(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-tsx",children:"import { createTestEngine } from '@atomic-testing/cypress';\n\nimport { loginScenePart } from './loginScenePart';\n\ncy.visit('/login');\nconst testEngine = createTestEngine(loginScenePart);\n"})})})]}),"\n",(0,a.jsx)(t.p,{children:"Once the test engine is created, it can be used to interact with the components in the scene."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:"// Test code is agnostic to the rendering framework\n\nawait testEngine.parts.username.setValue('john@example.com');\nawait testEngine.parts.password.setValue('');\nawait testEngine.parts.submit.click();\n\nconst error = await testEngine.parts.error.getText();\nexpect(error).toEqual('Password is required'); // Jest assertion, but any assertion library can be used\n"})})]})}function g(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(m,{...e})}):m(e)}},57608:(e,t,n)=>{n.d(t,{A:()=>w});var r=n(64700),a=n(23372),o=n(3731),s=n(73263),i=n(47530),c=n(34212),l=n(38637),d=n(78947);function u(e){return r.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function p(e){const{values:t,children:n}=e;return(0,r.useMemo)((()=>{const e=t??function(e){return u(e).map((({props:{value:e,label:t,attributes:n,default:r}})=>({value:e,label:t,attributes:n,default:r})))}(n);return function(e){const t=(0,l.XI)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function h({value:e,tabValues:t}){return t.some((t=>t.value===e))}function m({queryString:e=!1,groupId:t}){const n=(0,s.W6)(),a=function({queryString:e=!1,groupId:t}){if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:e,groupId:t});return[(0,c.aZ)(a),(0,r.useCallback)((e=>{if(!a)return;const t=new URLSearchParams(n.location.search);t.set(a,e),n.replace({...n.location,search:t.toString()})}),[a,n])]}function g(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,o=p(e),[s,c]=(0,r.useState)((()=>function({defaultValue:e,tabValues:t}){if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!h({value:e,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const n=t.find((e=>e.default))??t[0];if(!n)throw new Error("Unexpected error: 0 tabValues");return n.value}({defaultValue:t,tabValues:o}))),[l,u]=m({queryString:n,groupId:a}),[g,f]=function({groupId:e}){const t=function(e){return e?`docusaurus.tab.${e}`:null}(e),[n,a]=(0,d.Dv)(t);return[n,(0,r.useCallback)((e=>{t&&a.set(e)}),[t,a])]}({groupId:a}),b=(()=>{const e=l??g;return h({value:e,tabValues:o})?e:null})();(0,i.A)((()=>{b&&c(b)}),[b]);return{selectedValue:s,selectValue:(0,r.useCallback)((e=>{if(!h({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);c(e),u(e),f(e)}),[u,f,o]),tabValues:o}}var f=n(81698);const b={tabList:"tabList_vooe",tabItem:"tabItem_xcYg"};var v=n(27968);function x({className:e,block:t,selectedValue:n,selectValue:r,tabValues:s}){const i=[],{blockElementScrollPositionUntilNextRender:c}=(0,o.a_)(),l=e=>{const t=e.currentTarget,a=i.indexOf(t),o=s[a].value;o!==n&&(c(t),r(o))},d=e=>{let t=null;switch(e.key){case"Enter":l(e);break;case"ArrowRight":{const n=i.indexOf(e.currentTarget)+1;t=i[n]??i[0];break}case"ArrowLeft":{const n=i.indexOf(e.currentTarget)-1;t=i[n]??i[i.length-1];break}}t?.focus()};return(0,v.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.A)("tabs",{"tabs--block":t},e),children:s.map((({value:e,label:t,attributes:r})=>(0,v.jsx)("li",{role:"tab",tabIndex:n===e?0:-1,"aria-selected":n===e,ref:e=>{i.push(e)},onKeyDown:d,onClick:l,...r,className:(0,a.A)("tabs__item",b.tabItem,r?.className,{"tabs__item--active":n===e}),children:t??e},e)))})}function y({lazy:e,children:t,selectedValue:n}){const o=(Array.isArray(t)?t:[t]).filter(Boolean);if(e){const e=o.find((e=>e.props.value===n));return e?(0,r.cloneElement)(e,{className:(0,a.A)("margin-top--md",e.props.className)}):null}return(0,v.jsx)("div",{className:"margin-top--md",children:o.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==n})))})}function j(e){const t=g(e);return(0,v.jsxs)("div",{className:(0,a.A)("tabs-container",b.tabList),children:[(0,v.jsx)(x,{...t,...e}),(0,v.jsx)(y,{...t,...e})]})}function w(e){const t=(0,f.A)();return(0,v.jsx)(j,{...e,children:u(e.children)},String(t))}}}]);