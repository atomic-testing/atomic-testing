"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([["7977"],{78170:function(e,t,s){s.r(t),s.d(t,{frontMatter:()=>o,default:()=>h,toc:()=>d,metadata:()=>n,assets:()=>c,contentTitle:()=>a});var n=JSON.parse('{"id":"best-practices","title":"Best Practices","description":"Atomic Testing aims to keep your tests portable and maintainable. The","source":"@site/docs/best-practices.mdx","sourceDirName":".","slug":"/best-practices","permalink":"/docs/best-practices","draft":false,"unlisted":false,"editUrl":"https://github.com/atomic-testing/atomic-testing/tree/main/docs/docs/docs/best-practices.mdx","tags":[],"version":"current","sidebarPosition":6,"frontMatter":{"id":"best-practices","sidebar_position":6},"sidebar":"tutorialSidebar","previous":{"title":"Step-by-Step Tutorial","permalink":"/docs/tutorial"},"next":{"title":"Cheat Sheets & Troubleshooting","permalink":"/docs/cheat-sheets"}}'),i=s(54381),r=s(91261);let o={id:"best-practices",sidebar_position:6},a="Best Practices",c={},d=[{value:"1. Start with a Storybook Scenario",id:"1-start-with-a-storybook-scenario",level:3},{value:"2. Test Values, Not HTML Markup",id:"2-test-values-not-html-markup",level:3},{value:"3. Avoid Direct React Testing Library Calls",id:"3-avoid-direct-react-testing-library-calls",level:3},{value:"4. Use <code>data-testid</code> for Key Elements",id:"4-use-data-testid-for-key-elements",level:3},{value:"5. Clean Up the Test Engine",id:"5-clean-up-the-test-engine",level:3},{value:"6. Compose and Reuse Drivers",id:"6-compose-and-reuse-drivers",level:3},{value:"7. Provide the Necessary Context",id:"7-provide-the-necessary-context",level:3},{value:"8. Await Driver Actions",id:"8-await-driver-actions",level:3}];function l(e){let t={a:"a",code:"code",h1:"h1",h3:"h3",header:"header",p:"p",...(0,r.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"best-practices",children:"Best Practices"})}),"\n",(0,i.jsxs)(t.p,{children:["Atomic Testing aims to keep your tests portable and maintainable. The\nrecommendations below are distilled from the\n",(0,i.jsx)(t.a,{href:"https://github.com/atomic-testing/atomic-testing/tree/main/examples/example-mui-signup-form",children:"example signup form project"}),"\nand from the documentation throughout this repo."]}),"\n",(0,i.jsx)(t.h3,{id:"1-start-with-a-storybook-scenario",children:"1. Start with a Storybook Scenario"}),"\n",(0,i.jsx)(t.p,{children:"Whenever possible create a Storybook story that mirrors your test\nscenario. Being able to render the component in isolation makes it much\neasier to visualise the state you expect in your tests and allows you to\nreuse the same setup for interactive debugging. As Storybook\u2019s testing\ncapabilities improve you can reuse your Atomic drivers there as well."}),"\n",(0,i.jsx)(t.h3,{id:"2-test-values-not-html-markup",children:"2. Test Values, Not HTML Markup"}),"\n",(0,i.jsx)(t.p,{children:"Focus on observable behaviour rather than the DOM structure. Use the\ndriver APIs to read values and states\u2014such as a field\u2019s value or whether\na button is disabled\u2014instead of asserting on generated HTML. This keeps\ntests resilient to implementation changes and lets drivers work across\ndifferent environments."}),"\n",(0,i.jsx)(t.h3,{id:"3-avoid-direct-react-testing-library-calls",children:"3. Avoid Direct React Testing Library Calls"}),"\n",(0,i.jsxs)(t.p,{children:["Atomic Testing Library builds on top of React Testing Library (RTL) for\nDOM interactions, but calling RTL utilities directly couples your tests\nto a specific environment. For a deeper discussion of how Atomic Testing\nrelates to RTL, see ",(0,i.jsx)(t.a,{href:"/docs/atomic-testing-vs-rtl",children:"Atomic Testing vs React Testing Library"}),".\nPrefer the methods exposed by component drivers and the ",(0,i.jsx)(t.code,{children:"TestEngine"})," so\nyour tests remain predictable and can be run in other environments such\nas Playwright or Cypress."]}),"\n",(0,i.jsxs)(t.h3,{id:"4-use-data-testid-for-key-elements",children:["4. Use ",(0,i.jsx)(t.code,{children:"data-testid"})," for Key Elements"]}),"\n",(0,i.jsxs)(t.p,{children:["Assign stable ",(0,i.jsx)(t.code,{children:"data-testid"})," values to the elements you need to interact\nwith. Locators built with ",(0,i.jsx)(t.code,{children:"byDataTestId()"})," are both reliable and easy to\nread. Avoid relying solely on CSS selectors\u2014they tend to change as the\nmarkup evolves."]}),"\n",(0,i.jsx)(t.h3,{id:"5-clean-up-the-test-engine",children:"5. Clean Up the Test Engine"}),"\n",(0,i.jsxs)(t.p,{children:["Call ",(0,i.jsx)(t.code,{children:"testEngine.cleanUp()"})," in ",(0,i.jsx)(t.code,{children:"afterEach"})," hooks. Unmounting the rendered\ncomponent prevents cross\u2011test contamination and matches the pattern used\nthroughout the example tests."]}),"\n",(0,i.jsx)(t.h3,{id:"6-compose-and-reuse-drivers",children:"6. Compose and Reuse Drivers"}),"\n",(0,i.jsxs)(t.p,{children:["Complex widgets become easier to test when you encapsulate their\nbehaviour in a driver. The signup example composes form drivers that can\nbe reused in unit and end\u2011to\u2011end scenarios. Implement your own drivers\nwhen needed and use ",(0,i.jsx)(t.code,{children:"satisfies ScenePart"})," to get strong TypeScript\nsupport."]}),"\n",(0,i.jsx)(t.h3,{id:"7-provide-the-necessary-context",children:"7. Provide the Necessary Context"}),"\n",(0,i.jsxs)(t.p,{children:["Wrap tested components with any required providers\u2014such as a MUI\n",(0,i.jsx)(t.code,{children:"ThemeProvider"}),"\u2014when creating the test engine. The example project uses a\n",(0,i.jsx)(t.code,{children:"createTestEngineForComponent"})," helper to inject the theme so tests run in\na realistic environment."]}),"\n",(0,i.jsx)(t.h3,{id:"8-await-driver-actions",children:"8. Await Driver Actions"}),"\n",(0,i.jsxs)(t.p,{children:["Most driver methods return promises. Remember to ",(0,i.jsx)(t.code,{children:"await"})," interactions and\nqueries so tests wait for state updates before asserting results."]})]})}function h(e={}){let{wrapper:t}={...(0,r.a)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},91261:function(e,t,s){s.d(t,{Z:()=>a,a:()=>o});var n=s(73749);let i={},r=n.createContext(i);function o(e){let t=n.useContext(r);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),n.createElement(r.Provider,{value:t},e.children)}}}]);